/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2015-04-23 11:15:02.556682
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(0.393000000000000))*(x1));
x15=((IkReal(0.0790000000000000))*(x5));
x16=((IkReal(1.00000000000000))*(x12));
x17=((IkReal(0.00300000000000000))*(x1));
x18=((IkReal(1.00000000000000))*(x4));
x19=((IkReal(1.00000000000000))*(x1));
x20=((IkReal(1.00000000000000))*(x6));
x21=((x2)*(x3));
x22=((x2)*(x7));
x23=((x0)*(x4));
x24=((x1)*(x6));
x25=((x0)*(x7));
x26=((x7)*(x8));
x27=((IkReal(-1.00000000000000))*(x6));
x28=((x0)*(x2));
x29=((x3)*(x4));
x30=((x3)*(x7));
x31=((x19)*(x5));
x32=((x30)*(x6));
x33=((x18)*(x26));
x34=((((IkReal(-1.00000000000000))*(x18)*(x3)))+(((x1)*(x28))));
x35=((x28)+(((IkReal(-1.00000000000000))*(x1)*(x18)*(x3))));
x36=((((x1)*(x21)))+(x23));
x37=((((x22)*(x5)))+(x24));
x38=((((IkReal(-1.00000000000000))*(x31)))+(((x22)*(x6))));
x39=((((IkReal(-1.00000000000000))*(x0)*(x1)*(x18)))+(((IkReal(-1.00000000000000))*(x21))));
x40=((x34)*(x5));
x41=((x11)*(x37));
x42=((x36)*(x6));
x43=((x38)*(x9));
x44=((x35)*(x8));
x45=((x39)*(x8));
x46=((((x34)*(x6)))+(((x25)*(x5))));
x47=((((IkReal(-1.00000000000000))*(x20)*(x30)))+(((x36)*(x5))));
x48=((((x30)*(x5)))+(x42));
x49=((((IkReal(-1.00000000000000))*(x33)))+(x43));
x50=((x40)+(((x25)*(x27))));
x51=((((IkReal(-1.00000000000000))*(x18)*(x7)*(x9)))+(((x8)*(((x31)+(((IkReal(-1.00000000000000))*(x20)*(x22))))))));
x52=((x46)*(x9));
x53=((x11)*(x47));
x54=((x48)*(x9));
x55=((x11)*(x50));
x56=((x44)+(x54));
x57=((x45)+(x52));
x58=((((x35)*(x9)))+(((x8)*(((((IkReal(-1.00000000000000))*(x20)*(x36)))+(((IkReal(-1.00000000000000))*(x30)*(x5))))))));
x59=((x12)*(x56));
x60=((((x39)*(x9)))+(((x8)*(((((x27)*(x34)))+(((IkReal(-1.00000000000000))*(x25)*(x5))))))));
eerot[0]=((((x13)*(((((x12)*(x57)))+(x55)))))+(((x10)*(x60))));
eerot[1]=((((x10)*(((((IkReal(-1.00000000000000))*(x16)*(x57)))+(((IkReal(-1.00000000000000))*(x55)))))))+(((x13)*(x60))));
eerot[2]=((((x12)*(((x40)+(((IkReal(-1.00000000000000))*(x20)*(x25)))))))+(((x11)*(((((IkReal(-1.00000000000000))*(x45)))+(((IkReal(-1.00000000000000))*(x52))))))));
IkReal x61=((x25)*(x6));
eetrans[0]=((((IkReal(-0.402000000000000))*(x25)))+(((x5)*(((((x14)*(x28)))+(((IkReal(-0.393000000000000))*(x29)))))))+(((x12)*(((((IkReal(-0.0790000000000000))*(x61)))+(((x15)*(x34)))))))+(((IkReal(-0.393000000000000))*(x61)))+(((IkReal(-0.00300000000000000))*(x21)))+(((IkReal(-1.00000000000000))*(x17)*(x23)))+(((x11)*(((((IkReal(-0.0790000000000000))*(x52)))+(((IkReal(-0.0790000000000000))*(x45))))))));
eerot[3]=((((x10)*(x58)))+(((x13)*(((x59)+(x53))))));
eerot[4]=((((x13)*(x58)))+(((x10)*(((((IkReal(-1.00000000000000))*(x53)))+(((IkReal(-1.00000000000000))*(x59))))))));
eerot[5]=((((x11)*(((((IkReal(-1.00000000000000))*(x44)))+(((IkReal(-1.00000000000000))*(x54)))))))+(((x12)*(x47))));
eetrans[1]=((((IkReal(0.00300000000000000))*(x28)))+(((x5)*(((((x14)*(x21)))+(((IkReal(0.393000000000000))*(x23)))))))+(((IkReal(-0.393000000000000))*(x32)))+(((x11)*(((((IkReal(-0.0790000000000000))*(x54)))+(((IkReal(-0.0790000000000000))*(x44)))))))+(((IkReal(-1.00000000000000))*(x17)*(x29)))+(((IkReal(-0.402000000000000))*(x30)))+(((x12)*(((((IkReal(-0.0790000000000000))*(x32)))+(((x15)*(x36))))))));
eerot[6]=((((x10)*(x51)))+(((x13)*(((x41)+(((x12)*(x49))))))));
eerot[7]=((((x13)*(x51)))+(((x10)*(((((IkReal(-1.00000000000000))*(x41)))+(((IkReal(-1.00000000000000))*(x16)*(x49))))))));
eerot[8]=((((x11)*(((((IkReal(-1.00000000000000))*(x43)))+(x33)))))+(((x12)*(x37))));
eetrans[2]=((IkReal(0.313500000000000))+(((IkReal(0.402000000000000))*(x1)))+(((x12)*(((((IkReal(0.0790000000000000))*(x24)))+(((x15)*(x22)))))))+(((x11)*(((((IkReal(-0.0790000000000000))*(x43)))+(((IkReal(0.0790000000000000))*(x26)*(x4)))))))+(((x14)*(x6)))+(((IkReal(-0.00300000000000000))*(x4)*(x7)))+(((IkReal(0.393000000000000))*(x22)*(x5))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j5=pfree[0]; cj5=cos(pfree[0]); sj5=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((IkReal(-0.0790000000000000))*(r02)))+(px));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((IkReal(-0.0790000000000000))*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.313500000000000))+(((IkReal(-0.0790000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((IkReal(-1.00028483536516))+(((IkReal(3.16483739065487))*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
IkReal x62=(sj5)*(sj5);
dummyeval[0]=((((x62)*((npx)*(npx))))+(((x62)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x63=(sj5)*(sj5);
dummyeval[0]=((((x63)*((npx)*(npx))))+(((x63)*((npy)*(npy)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x64=(sj5)*(sj5);
dummyeval[0]=((((x64)*((npy)*(npy))))+(((x64)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x65=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.316062000000000))+(((IkReal(0.315972000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x65))));
evalcond[2]=((IkReal(0.00716400000000000))+(((IkReal(0.786000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x65))));
evalcond[3]=((IkReal(0.393000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.402000000000000))*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=((IkReal(-0.00300000000000000))+(npy));
IkReal gconst2;
gconst2=((IkReal(-0.804000000000000))*(sj3));
IkReal gconst3;
gconst3=((IkReal(0.00300000000000000))+(npy));
IkReal gconst4;
gconst4=((IkReal(-0.00300000000000000))+(npy));
IkReal gconst5;
gconst5=((IkReal(2.00000000000000))*(npx));
IkReal gconst6;
gconst6=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst7;
gconst7=((IkReal(-0.00300000000000000))+(npy));
IkReal gconst8;
gconst8=((IkReal(-0.804000000000000))*(sj3));
IkReal gconst9;
gconst9=((IkReal(0.00300000000000000))+(npy));
IkReal gconst10;
gconst10=((IkReal(-0.00300000000000000))+(npy));
IkReal gconst11;
gconst11=((IkReal(2.00000000000000))*(npx));
IkReal gconst12;
gconst12=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst13;
gconst13=((IkReal(2.00000000000000))*(npx));
IkReal gconst14;
gconst14=((IkReal(2.00000000000000))*(npx));
IkReal gconst15;
gconst15=((IkReal(2.00000000000000))*(npx));
IkReal gconst16;
gconst16=((IkReal(-4.00000000000000))*(npy));
IkReal gconst17;
gconst17=((IkReal(-2.00000000000000))*(npx));
IkReal gconst18;
gconst18=((IkReal(2.00000000000000))*(npx));
IkReal gconst19;
gconst19=((IkReal(2.00000000000000))*(npx));
IkReal gconst20;
gconst20=((IkReal(2.00000000000000))*(npx));
IkReal gconst21;
gconst21=((IkReal(-4.00000000000000))*(npy));
IkReal gconst22;
gconst22=((IkReal(-2.00000000000000))*(npx));
IkReal gconst23;
gconst23=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst24;
gconst24=((IkReal(-0.804000000000000))*(sj3));
IkReal gconst25;
gconst25=((IkReal(0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst26;
gconst26=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst27;
gconst27=((IkReal(-2.00000000000000))*(npx));
IkReal gconst28;
gconst28=((IkReal(-0.00300000000000000))+(npy));
IkReal gconst29;
gconst29=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst30;
gconst30=((IkReal(-0.804000000000000))*(sj3));
IkReal gconst31;
gconst31=((IkReal(0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst32;
gconst32=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst33;
gconst33=((IkReal(-2.00000000000000))*(npx));
IkReal gconst34;
gconst34=((IkReal(-0.00300000000000000))+(npy));
IkReal x66=((gconst25)*(gconst26));
IkReal x67=((gconst31)*(gconst32));
IkReal x68=((gconst28)*(gconst29));
IkReal x69=((gconst30)*(gconst32));
IkReal x70=((gconst25)*(gconst27));
dummyeval[0]=((((gconst23)*(gconst28)*(x67)))+(((IkReal(-1.00000000000000))*(x66)*(x67)))+(((x69)*(x70)))+(((gconst29)*(gconst34)*(x66)))+(((IkReal(-1.00000000000000))*(gconst29)*(gconst33)*(x70)))+(((IkReal(-1.00000000000000))*(gconst23)*(gconst34)*(x68)))+(((IkReal(-1.00000000000000))*(gconst24)*(gconst28)*(x69)))+(((gconst24)*(gconst33)*(x68))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x71=((gconst29)*(gconst33));
IkReal x72=((gconst24)*(gconst28));
IkReal x73=((gconst26)*(gconst34));
IkReal x74=((IkReal(1.00000000000000))*(gconst14));
IkReal x75=((gconst10)*(gconst4));
IkReal x76=((IkReal(1.00000000000000))*(gconst3));
IkReal x77=((gconst20)*(gconst8));
IkReal x78=((IkReal(1.00000000000000))*(gconst6));
IkReal x79=((gconst28)*(gconst32));
IkReal x80=((gconst18)*(gconst25));
IkReal x81=((IkReal(1.00000000000000))*(gconst27));
IkReal x82=((gconst3)*(gconst5));
IkReal x83=((gconst11)*(gconst5));
IkReal x84=((gconst12)*(gconst7));
IkReal x85=((IkReal(1.00000000000000))*(gconst25));
IkReal x86=((gconst3)*(gconst4));
IkReal x87=((gconst12)*(gconst18));
IkReal x88=((gconst20)*(gconst31));
IkReal x89=((gconst17)*(gconst24));
IkReal x90=((gconst23)*(gconst31));
IkReal x91=((gconst10)*(gconst17));
IkReal x92=((gconst1)*(gconst9));
IkReal x93=((gconst21)*(gconst29));
IkReal x94=((gconst2)*(gconst8));
IkReal x95=((gconst27)*(gconst30));
IkReal x96=((gconst25)*(gconst32));
IkReal x97=((gconst26)*(gconst32));
IkReal x98=((gconst22)*(gconst7));
IkReal x99=((gconst29)*(gconst34));
IkReal x100=((gconst10)*(gconst6));
IkReal x101=((gconst23)*(gconst28));
IkReal x102=((IkReal(1.00000000000000))*(gconst30));
IkReal x103=((gconst25)*(gconst29));
IkReal x104=((gconst10)*(gconst8));
IkReal x105=((gconst11)*(gconst7));
IkReal x106=((IkReal(1.00000000000000))*(gconst17));
IkReal x107=((gconst2)*(gconst6)*(gconst7));
IkReal x108=((gconst31)*(gconst32)*(x85));
IkReal x109=((IkReal(1.00000000000000))*(gconst34)*(x101));
op[0]=((((x79)*(x90)))+(((IkReal(-1.00000000000000))*(x101)*(x99)))+(((IkReal(-1.00000000000000))*(gconst31)*(x85)*(x97)))+(((IkReal(-1.00000000000000))*(gconst32)*(x102)*(x72)))+(((IkReal(-1.00000000000000))*(gconst25)*(x71)*(x81)))+(((x95)*(x96)))+(((x103)*(x73)))+(((x71)*(x72))));
op[1]=((((gconst17)*(gconst32)*(x90)))+(((gconst18)*(gconst33)*(x72)))+(((IkReal(-1.00000000000000))*(gconst19)*(x85)*(x97)))+(((IkReal(-1.00000000000000))*(gconst25)*(x81)*(x93)))+(((gconst16)*(gconst30)*(x96)))+(((gconst13)*(gconst31)*(x79)))+(((gconst15)*(gconst25)*(x99)))+(((IkReal(-1.00000000000000))*(gconst31)*(x74)*(x97)))+(((x101)*(x88)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst29)*(x101)))+(((IkReal(-1.00000000000000))*(gconst33)*(x80)*(x81)))+(((x72)*(x93)))+(((IkReal(-1.00000000000000))*(gconst20)*(x102)*(x72)))+(((gconst14)*(gconst29)*(x73)))+(((gconst14)*(gconst32)*(x95)))+(((x73)*(x80)))+(((IkReal(-1.00000000000000))*(gconst26)*(x85)*(x88)))+(((gconst19)*(gconst23)*(x79)))+(((IkReal(-1.00000000000000))*(gconst16)*(x71)*(x85)))+(((gconst22)*(gconst26)*(x103)))+(((IkReal(-1.00000000000000))*(gconst18)*(x109)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst28)*(x99)))+(((IkReal(-1.00000000000000))*(gconst15)*(x108)))+(((IkReal(-1.00000000000000))*(gconst32)*(x102)*(x89)))+(((IkReal(-1.00000000000000))*(gconst23)*(x106)*(x99)))+(((IkReal(-1.00000000000000))*(gconst27)*(x71)*(x74)))+(((gconst20)*(gconst25)*(x95)))+(((x71)*(x89))));
op[2]=((((IkReal(-1.00000000000000))*(gconst14)*(gconst15)*(gconst31)*(gconst32)))+(((gconst14)*(gconst18)*(gconst26)*(gconst34)))+(((IkReal(-1.00000000000000))*(gconst24)*(gconst28)*(gconst32)*(gconst8)))+(((gconst14)*(gconst22)*(gconst26)*(gconst29)))+(((gconst15)*(gconst22)*(gconst25)*(gconst29)))+(((gconst2)*(gconst28)*(gconst29)*(gconst33)))+(((gconst10)*(gconst25)*(gconst27)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst23)*(gconst29)*(gconst34)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst27)*(gconst33)))+(((gconst17)*(gconst19)*(gconst23)*(gconst32)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst19)*(gconst26)*(gconst32)))+(((gconst25)*(gconst27)*(gconst32)*(gconst8)))+(((gconst24)*(gconst29)*(gconst33)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst29)*(gconst34)))+(((gconst17)*(gconst21)*(gconst24)*(gconst29)))+(((gconst16)*(gconst20)*(gconst25)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst18)*(gconst25)*(gconst33)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst28)*(gconst34)))+(((gconst23)*(gconst31)*(gconst32)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst21)*(gconst25)*(gconst27)))+(((gconst26)*(gconst29)*(gconst3)*(gconst34)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst22)*(gconst28)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst21)*(gconst27)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst26)*(gconst3)*(gconst31)*(gconst32)))+(((IkReal(-1.00000000000000))*(gconst25)*(gconst29)*(gconst33)*(gconst5)))+(((gconst14)*(gconst16)*(gconst30)*(gconst32)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst20)*(gconst26)*(gconst31)))+(((gconst15)*(gconst18)*(gconst25)*(gconst34)))+(((gconst25)*(gconst30)*(gconst32)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst23)*(gconst28)*(gconst29)))+(((gconst25)*(gconst26)*(gconst34)*(gconst7)))+(((gconst24)*(gconst28)*(gconst33)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst21)*(gconst25)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst23)*(gconst28)*(gconst34)*(gconst7)))+(((gconst23)*(gconst28)*(gconst32)*(gconst9)))+(((gconst14)*(gconst15)*(gconst29)*(gconst34)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst25)*(gconst26)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst28)*(gconst29)*(gconst34)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst20)*(gconst24)*(gconst30)))+(((gconst11)*(gconst24)*(gconst28)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst16)*(gconst29)*(gconst33)))+(((IkReal(-1.00000000000000))*(gconst25)*(gconst26)*(gconst32)*(gconst9)))+(((gconst18)*(gconst21)*(gconst24)*(gconst28)))+(((gconst17)*(gconst18)*(gconst24)*(gconst33)))+(((IkReal(-1.00000000000000))*(gconst25)*(gconst27)*(gconst33)*(gconst7)))+(((gconst13)*(gconst20)*(gconst28)*(gconst31)))+(((gconst10)*(gconst23)*(gconst28)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst22)*(gconst23)*(gconst29)))+(((gconst13)*(gconst19)*(gconst28)*(gconst32)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst25)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst25)*(gconst31)*(gconst32)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst28)*(gconst30)*(gconst32)))+(((gconst17)*(gconst20)*(gconst23)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst19)*(gconst25)*(gconst32)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst25)*(gconst27)*(gconst29)))+(((gconst19)*(gconst20)*(gconst23)*(gconst28)))+(((gconst18)*(gconst22)*(gconst25)*(gconst26)))+(((gconst25)*(gconst29)*(gconst34)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst23)*(gconst34)))+(((gconst12)*(gconst25)*(gconst26)*(gconst29)))+(((gconst27)*(gconst3)*(gconst30)*(gconst32)))+(((gconst1)*(gconst28)*(gconst31)*(gconst32)))+(((IkReal(-1.00000000000000))*(gconst27)*(gconst29)*(gconst3)*(gconst33)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst20)*(gconst25)*(gconst26)))+(((gconst14)*(gconst20)*(gconst27)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst23)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst24)*(gconst28)*(gconst30)))+(((gconst13)*(gconst17)*(gconst31)*(gconst32)))+(((IkReal(-1.00000000000000))*(gconst24)*(gconst30)*(gconst32)*(gconst6))));
op[3]=((((IkReal(-1.00000000000000))*(gconst1)*(gconst17)*(gconst29)*(gconst34)))+(((gconst1)*(gconst19)*(gconst28)*(gconst32)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst14)*(gconst27)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst25)*(gconst29)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst25)*(gconst33)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst16)*(gconst18)*(gconst33)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst23)*(gconst34)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst22)*(gconst28)*(gconst29)))+(((gconst13)*(gconst17)*(gconst19)*(gconst32)))+(((gconst14)*(gconst15)*(gconst22)*(gconst29)))+(((gconst12)*(gconst15)*(gconst25)*(gconst29)))+(((gconst14)*(gconst29)*(gconst34)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst25)*(gconst33)*(gconst5)))+(((gconst11)*(gconst18)*(gconst24)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst19)*(gconst25)*(gconst26)))+(((gconst20)*(gconst27)*(gconst3)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst25)*(gconst32)*(gconst9)))+(((gconst12)*(gconst18)*(gconst25)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst23)*(gconst28)*(gconst7)))+(((gconst17)*(gconst18)*(gconst21)*(gconst24)))+(((gconst21)*(gconst24)*(gconst28)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst25)*(gconst26)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst15)*(gconst25)*(gconst31)))+(((gconst22)*(gconst26)*(gconst29)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst17)*(gconst23)*(gconst29)))+(((gconst20)*(gconst25)*(gconst27)*(gconst8)))+(((gconst18)*(gconst25)*(gconst34)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst18)*(gconst22)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst28)*(gconst34)))+(((gconst10)*(gconst19)*(gconst23)*(gconst28)))+(((gconst16)*(gconst25)*(gconst32)*(gconst8)))+(((gconst13)*(gconst17)*(gconst20)*(gconst31)))+(((gconst10)*(gconst13)*(gconst28)*(gconst31)))+(((gconst13)*(gconst19)*(gconst20)*(gconst28)))+(((gconst14)*(gconst27)*(gconst32)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst22)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst26)*(gconst3)*(gconst32)))+(((gconst14)*(gconst26)*(gconst34)*(gconst7)))+(((gconst15)*(gconst18)*(gconst22)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst22)*(gconst28)))+(((gconst1)*(gconst20)*(gconst28)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst27)*(gconst3)*(gconst33)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst24)*(gconst32)*(gconst8)))+(((gconst18)*(gconst2)*(gconst28)*(gconst33)))+(((gconst2)*(gconst21)*(gconst28)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst18)*(gconst23)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst25)*(gconst31)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst29)*(gconst3)*(gconst33)))+(((gconst18)*(gconst26)*(gconst3)*(gconst34)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst26)*(gconst32)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst25)*(gconst32)*(gconst4)))+(((gconst1)*(gconst17)*(gconst31)*(gconst32)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst28)*(gconst34)*(gconst7)))+(((gconst22)*(gconst25)*(gconst29)*(gconst4)))+(((gconst20)*(gconst23)*(gconst28)*(gconst9)))+(((gconst18)*(gconst24)*(gconst33)*(gconst6)))+(((gconst14)*(gconst18)*(gconst22)*(gconst26)))+(((gconst20)*(gconst23)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst19)*(gconst20)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst15)*(gconst20)*(gconst31)))+(((gconst12)*(gconst14)*(gconst26)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst18)*(gconst25)*(gconst27)))+(((gconst22)*(gconst25)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst18)*(gconst21)*(gconst25)))+(((gconst14)*(gconst30)*(gconst32)*(gconst5)))+(((gconst13)*(gconst28)*(gconst32)*(gconst9)))+(((gconst14)*(gconst16)*(gconst20)*(gconst30)))+(((gconst17)*(gconst2)*(gconst29)*(gconst33)))+(((gconst17)*(gconst23)*(gconst32)*(gconst9)))+(((gconst16)*(gconst3)*(gconst30)*(gconst32)))+(((gconst20)*(gconst25)*(gconst30)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst24)*(gconst28)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst21)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst26)*(gconst31)))+(((gconst10)*(gconst17)*(gconst23)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst16)*(gconst21)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst15)*(gconst19)*(gconst32)))+(((gconst17)*(gconst19)*(gconst20)*(gconst23)))+(((gconst10)*(gconst16)*(gconst25)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst25)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst17)*(gconst24)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst26)*(gconst3)*(gconst31)))+(((gconst14)*(gconst15)*(gconst18)*(gconst34)))+(((gconst13)*(gconst31)*(gconst32)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst28)*(gconst29)))+(((gconst17)*(gconst24)*(gconst33)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst24)*(gconst30)*(gconst6)))+(((gconst10)*(gconst14)*(gconst27)*(gconst30)))+(((gconst15)*(gconst25)*(gconst34)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst3)*(gconst31)*(gconst32)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst31)*(gconst32)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst30)*(gconst32)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst18)*(gconst34)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst27)*(gconst29)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst19)*(gconst20)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst25)*(gconst27)*(gconst7)))+(((gconst11)*(gconst17)*(gconst24)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst29)*(gconst33)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst29)*(gconst34)*(gconst6)))+(((gconst21)*(gconst24)*(gconst29)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst20)*(gconst28)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst27)*(gconst33)*(gconst7)))+(((gconst15)*(gconst29)*(gconst3)*(gconst34)))+(((gconst19)*(gconst23)*(gconst32)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst23)*(gconst34)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst23)*(gconst29)*(gconst6))));
op[4]=((((gconst10)*(gconst23)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst20)*(gconst26)*(gconst3)))+(((gconst25)*(gconst32)*(gconst5)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst17)*(gconst29)))+(((gconst10)*(gconst13)*(gconst19)*(gconst28)))+(((gconst15)*(gconst18)*(gconst3)*(gconst34)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst15)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst17)*(gconst18)*(gconst34)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst14)*(gconst16)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst20)*(gconst25)*(gconst4)))+(((gconst24)*(gconst33)*(gconst6)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst29)*(gconst34)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst25)*(gconst33)*(gconst5)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst18)*(gconst3)*(gconst33)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst24)*(gconst30)*(gconst6)))+(((gconst11)*(gconst2)*(gconst28)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst21)*(gconst27)*(gconst7)))+(((gconst10)*(gconst13)*(gconst17)*(gconst31)))+(((gconst10)*(gconst25)*(gconst27)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst22)*(gconst23)*(gconst6)))+(((gconst10)*(gconst27)*(gconst3)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst25)*(gconst9)))+(((gconst1)*(gconst19)*(gconst20)*(gconst28)))+(((gconst14)*(gconst16)*(gconst32)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst20)*(gconst26)*(gconst9)))+(((gconst1)*(gconst31)*(gconst32)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst27)*(gconst3)*(gconst33)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst16)*(gconst18)*(gconst21)))+(((gconst1)*(gconst17)*(gconst19)*(gconst32)))+(((IkReal(-1.00000000000000))*(gconst29)*(gconst3)*(gconst33)*(gconst5)))+(((gconst12)*(gconst25)*(gconst29)*(gconst4)))+(((gconst14)*(gconst18)*(gconst34)*(gconst4)))+(((gconst12)*(gconst14)*(gconst18)*(gconst26)))+(((gconst1)*(gconst10)*(gconst28)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst30)*(gconst32)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst21)*(gconst27)*(gconst3)))+(((gconst25)*(gconst34)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst18)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst22)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst25)*(gconst29)*(gconst5)))+(((gconst16)*(gconst20)*(gconst3)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst16)*(gconst33)*(gconst7)))+(((gconst14)*(gconst22)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst17)*(gconst18)*(gconst23)))+(((gconst18)*(gconst2)*(gconst21)*(gconst28)))+(((gconst3)*(gconst30)*(gconst32)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst23)*(gconst28)*(gconst7)))+(((gconst26)*(gconst3)*(gconst34)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst28)*(gconst34)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst21)*(gconst25)*(gconst7)))+(((gconst18)*(gconst22)*(gconst26)*(gconst3)))+(((gconst13)*(gconst19)*(gconst32)*(gconst6)))+(((gconst14)*(gconst20)*(gconst30)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst15)*(gconst32)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst23)*(gconst29)*(gconst6)))+(((gconst1)*(gconst28)*(gconst32)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst12)*(gconst28)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst27)*(gconst29)*(gconst3)))+(((gconst29)*(gconst3)*(gconst34)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst19)*(gconst32)*(gconst4)))+(((gconst2)*(gconst29)*(gconst33)*(gconst6)))+(((gconst18)*(gconst22)*(gconst25)*(gconst4)))+(((gconst10)*(gconst17)*(gconst19)*(gconst23)))+(((gconst2)*(gconst28)*(gconst33)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst28)*(gconst32)*(gconst8)))+(((gconst18)*(gconst21)*(gconst24)*(gconst6)))+(((gconst12)*(gconst25)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst25)*(gconst31)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst25)*(gconst27)*(gconst7)))+(((gconst17)*(gconst21)*(gconst24)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst21)*(gconst29)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst20)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst34)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst25)*(gconst32)*(gconst4)*(gconst9)))+(((gconst11)*(gconst24)*(gconst28)*(gconst7)))+(((gconst14)*(gconst20)*(gconst27)*(gconst8)))+(((gconst17)*(gconst18)*(gconst2)*(gconst33)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst15)*(gconst19)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst15)*(gconst19)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst22)*(gconst23)*(gconst7)))+(((gconst15)*(gconst22)*(gconst29)*(gconst3)))+(((gconst10)*(gconst25)*(gconst30)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst24)*(gconst32)*(gconst6)*(gconst8)))+(((gconst16)*(gconst20)*(gconst25)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst24)*(gconst28)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst18)*(gconst22)))+(((gconst14)*(gconst15)*(gconst18)*(gconst22)))+(((gconst10)*(gconst14)*(gconst16)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst21)*(gconst25)*(gconst5)))+(((gconst12)*(gconst15)*(gconst18)*(gconst25)))+(((gconst15)*(gconst22)*(gconst25)*(gconst7)))+(((gconst11)*(gconst17)*(gconst18)*(gconst24)))+(((gconst13)*(gconst20)*(gconst31)*(gconst6)))+(((gconst23)*(gconst32)*(gconst6)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst3)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst22)*(gconst28)*(gconst7)))+(((gconst1)*(gconst17)*(gconst20)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst3)*(gconst31)*(gconst32)*(gconst4)))+(((gconst14)*(gconst22)*(gconst29)*(gconst4)))+(((gconst14)*(gconst15)*(gconst34)*(gconst7)))+(((gconst27)*(gconst3)*(gconst32)*(gconst8)))+(((gconst11)*(gconst24)*(gconst29)*(gconst6)))+(((gconst17)*(gconst20)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst20)*(gconst24)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst2)*(gconst28)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst22)*(gconst29)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst25)*(gconst26)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst26)*(gconst3)*(gconst32)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst34)*(gconst6)))+(((gconst12)*(gconst14)*(gconst15)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst33)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst17)*(gconst22)*(gconst29)))+(((gconst10)*(gconst23)*(gconst31)*(gconst6)))+(((gconst19)*(gconst20)*(gconst23)*(gconst6)))+(((gconst17)*(gconst2)*(gconst21)*(gconst29)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst18)*(gconst25)))+(((gconst13)*(gconst20)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst19)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst23)*(gconst34)*(gconst6)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst20)*(gconst31)*(gconst4)))+(((gconst13)*(gconst17)*(gconst19)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst19)*(gconst3)*(gconst32)))+(((gconst12)*(gconst26)*(gconst29)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst14)*(gconst18)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst26)*(gconst3)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst21)*(gconst29)*(gconst3)))+(((gconst13)*(gconst17)*(gconst32)*(gconst9))));
op[5]=((((gconst20)*(gconst25)*(gconst5)*(gconst8)))+(((gconst1)*(gconst17)*(gconst19)*(gconst20)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst24)*(gconst6)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst14)*(gconst16)*(gconst18)))+(((gconst15)*(gconst18)*(gconst22)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst31)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst33)*(gconst5)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst18)*(gconst22)*(gconst6)))+(((gconst14)*(gconst32)*(gconst5)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst17)*(gconst34)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst17)*(gconst18)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst29)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst20)*(gconst30)*(gconst6)))+(((gconst13)*(gconst32)*(gconst6)*(gconst9)))+(((gconst11)*(gconst17)*(gconst24)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst17)*(gconst2)*(gconst30)))+(((gconst22)*(gconst29)*(gconst3)*(gconst4)))+(((gconst20)*(gconst27)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst25)*(gconst4)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst34)*(gconst6)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst28)*(gconst7)))+(((gconst12)*(gconst18)*(gconst26)*(gconst3)))+(((gconst18)*(gconst2)*(gconst33)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst3)*(gconst33)*(gconst7)))+(((gconst2)*(gconst21)*(gconst28)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst18)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst15)*(gconst19)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst18)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst19)*(gconst20)*(gconst4)))+(((gconst11)*(gconst17)*(gconst2)*(gconst29)))+(((gconst10)*(gconst19)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst3)*(gconst33)*(gconst5)))+(((gconst10)*(gconst14)*(gconst27)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst19)*(gconst20)*(gconst3)))+(((gconst2)*(gconst21)*(gconst29)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst18)*(gconst21)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst22)*(gconst29)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst22)*(gconst7)))+(((gconst15)*(gconst3)*(gconst34)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst15)*(gconst25)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst26)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst15)*(gconst3)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst27)*(gconst3)*(gconst7)))+(((gconst10)*(gconst16)*(gconst3)*(gconst30)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst12)*(gconst17)*(gconst29)))+(((gconst10)*(gconst13)*(gconst28)*(gconst9)))+(((gconst1)*(gconst20)*(gconst28)*(gconst9)))+(((gconst16)*(gconst3)*(gconst32)*(gconst8)))+(((gconst18)*(gconst3)*(gconst34)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst23)*(gconst6)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst34)*(gconst6)))+(((gconst10)*(gconst14)*(gconst30)*(gconst5)))+(((gconst17)*(gconst2)*(gconst33)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst12)*(gconst18)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst3)*(gconst31)*(gconst4)))+(((gconst21)*(gconst24)*(gconst6)*(gconst7)))+(((gconst13)*(gconst17)*(gconst20)*(gconst9)))+(((gconst10)*(gconst17)*(gconst23)*(gconst9)))+(((gconst14)*(gconst34)*(gconst4)*(gconst7)))+(((gconst14)*(gconst16)*(gconst20)*(gconst8)))+(((gconst12)*(gconst14)*(gconst26)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst22)*(gconst28)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst3)*(gconst32)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst32)*(gconst4)*(gconst9)))+(((gconst12)*(gconst15)*(gconst25)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst17)*(gconst24)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst19)*(gconst25)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst29)*(gconst3)*(gconst5)))+(((gconst11)*(gconst18)*(gconst2)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst32)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst3)*(gconst32)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst21)*(gconst5)))+(((gconst10)*(gconst13)*(gconst31)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst25)*(gconst5)*(gconst7)))+(((gconst1)*(gconst20)*(gconst31)*(gconst6)))+(((gconst22)*(gconst25)*(gconst4)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst17)*(gconst23)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst19)*(gconst26)*(gconst3)))+(((gconst17)*(gconst18)*(gconst2)*(gconst21)))+(((gconst20)*(gconst23)*(gconst6)*(gconst9)))+(((gconst12)*(gconst14)*(gconst15)*(gconst18)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst14)*(gconst27)*(gconst7)))+(((gconst22)*(gconst26)*(gconst3)*(gconst7)))+(((gconst1)*(gconst19)*(gconst32)*(gconst6)))+(((gconst12)*(gconst18)*(gconst25)*(gconst4)))+(((gconst13)*(gconst19)*(gconst20)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst18)*(gconst25)*(gconst5)))+(((gconst14)*(gconst18)*(gconst22)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst25)*(gconst7)))+(((gconst12)*(gconst14)*(gconst29)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst17)*(gconst18)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst15)*(gconst20)*(gconst9)))+(((gconst12)*(gconst15)*(gconst29)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst29)*(gconst6)))+(((gconst10)*(gconst13)*(gconst17)*(gconst19)))+(((gconst11)*(gconst18)*(gconst24)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst16)*(gconst21)*(gconst7)))+(((gconst20)*(gconst3)*(gconst30)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst26)*(gconst9)))+(((gconst14)*(gconst15)*(gconst22)*(gconst7)))+(((gconst1)*(gconst10)*(gconst17)*(gconst31)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst20)*(gconst28)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst14)*(gconst29)*(gconst5)))+(((gconst10)*(gconst16)*(gconst25)*(gconst8)))+(((gconst1)*(gconst10)*(gconst19)*(gconst28)))+(((gconst1)*(gconst17)*(gconst32)*(gconst9))));
op[6]=((((IkReal(-1.00000000000000))*(gconst10)*(gconst3)*(gconst31)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst3)*(gconst33)*(gconst5)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst14)*(gconst16)*(gconst7)))+(((gconst10)*(gconst3)*(gconst30)*(gconst5)))+(((gconst18)*(gconst2)*(gconst21)*(gconst6)))+(((gconst1)*(gconst32)*(gconst6)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst22)*(gconst6)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst3)*(gconst32)*(gconst4)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst21)*(gconst3)*(gconst5)))+(((gconst1)*(gconst10)*(gconst17)*(gconst19)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst15)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst12)*(gconst28)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst32)*(gconst6)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst16)*(gconst18)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst12)*(gconst17)*(gconst18)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst20)*(gconst8)))+(((gconst2)*(gconst33)*(gconst6)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst20)*(gconst3)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst23)*(gconst6)*(gconst7)))+(((gconst14)*(gconst20)*(gconst5)*(gconst8)))+(((gconst15)*(gconst22)*(gconst3)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst25)*(gconst4)*(gconst9)))+(((gconst12)*(gconst25)*(gconst4)*(gconst7)))+(((gconst10)*(gconst23)*(gconst6)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst27)*(gconst3)*(gconst7)))+(((gconst3)*(gconst32)*(gconst5)*(gconst8)))+(((gconst10)*(gconst25)*(gconst5)*(gconst8)))+(((gconst1)*(gconst19)*(gconst20)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst26)*(gconst3)*(gconst9)))+(((gconst12)*(gconst14)*(gconst18)*(gconst4)))+(((gconst12)*(gconst15)*(gconst18)*(gconst3)))+(((gconst17)*(gconst2)*(gconst21)*(gconst7)))+(((gconst10)*(gconst13)*(gconst17)*(gconst9)))+(((gconst1)*(gconst10)*(gconst28)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst34)*(gconst6)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst17)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst12)*(gconst29)*(gconst6)))+(((gconst1)*(gconst17)*(gconst20)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst20)*(gconst4)*(gconst9)))+(((gconst11)*(gconst2)*(gconst28)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst15)*(gconst19)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst19)*(gconst4)))+(((gconst12)*(gconst26)*(gconst3)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst2)*(gconst30)*(gconst6)))+(((gconst11)*(gconst24)*(gconst6)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst25)*(gconst5)*(gconst7)))+(((gconst16)*(gconst20)*(gconst3)*(gconst8)))+(((gconst11)*(gconst2)*(gconst29)*(gconst6)))+(((gconst18)*(gconst22)*(gconst3)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst17)*(gconst22)*(gconst7)))+(((gconst10)*(gconst13)*(gconst19)*(gconst6)))+(((gconst11)*(gconst17)*(gconst18)*(gconst2)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst21)*(gconst5)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst21)*(gconst3)*(gconst7)))+(((gconst12)*(gconst29)*(gconst3)*(gconst4)))+(((gconst13)*(gconst20)*(gconst6)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst29)*(gconst3)*(gconst5)))+(((gconst10)*(gconst14)*(gconst16)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst20)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst18)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst22)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst2)*(gconst28)*(gconst8)))+(((gconst1)*(gconst10)*(gconst31)*(gconst6)))+(((gconst14)*(gconst22)*(gconst4)*(gconst7)))+(((gconst12)*(gconst14)*(gconst15)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst24)*(gconst6)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst14)*(gconst18)*(gconst5)))+(((gconst10)*(gconst27)*(gconst3)*(gconst8)))+(((gconst3)*(gconst34)*(gconst4)*(gconst7))));
op[7]=((((IkReal(-1.00000000000000))*(gconst19)*(x75)*(x76)))+(((IkReal(-1.00000000000000))*(gconst16)*(x105)*(x76)))+(((x77)*(x82)))+(((gconst17)*(gconst2)*(x105)))+(((IkReal(-1.00000000000000))*(gconst1)*(x78)*(x87)))+(((IkReal(-1.00000000000000))*(gconst9)*(x74)*(x75)))+(((IkReal(-1.00000000000000))*(gconst18)*(x76)*(x83)))+(((IkReal(-1.00000000000000))*(x91)*(x94)))+(((IkReal(-1.00000000000000))*(gconst1)*(x78)*(x98)))+(((x86)*(x98)))+(((x86)*(x87)))+(((gconst13)*(gconst9)*(x100)))+(((IkReal(-1.00000000000000))*(gconst2)*(x77)*(x78)))+(((gconst11)*(gconst18)*(gconst2)*(gconst6)))+(((gconst14)*(gconst4)*(x84)))+(((gconst21)*(x107)))+(((IkReal(-1.00000000000000))*(gconst1)*(x106)*(x84)))+(((gconst1)*(gconst19)*(x100)))+(((IkReal(-1.00000000000000))*(gconst7)*(x74)*(x83)))+(((gconst15)*(gconst3)*(x84)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst5)*(gconst7)*(x76)))+(((gconst16)*(gconst3)*(x104)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst15)*(gconst9)*(x76)))+(((gconst20)*(gconst6)*(x92)))+(((gconst14)*(gconst5)*(x104)))+(((IkReal(-1.00000000000000))*(gconst13)*(x78)*(x84)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst4)*(gconst9)*(x76)))+(((x91)*(x92))));
op[8]=((((IkReal(-1.00000000000000))*(gconst10)*(x78)*(x94)))+(((x84)*(x86)))+(((gconst2)*(gconst6)*(x105)))+(((x100)*(x92)))+(((IkReal(-1.00000000000000))*(gconst1)*(x78)*(x84)))+(((IkReal(-1.00000000000000))*(gconst7)*(x76)*(x83)))+(((x104)*(x82)))+(((IkReal(-1.00000000000000))*(gconst9)*(x75)*(x76))));
polyroots8(op,zeror,numroots);
IkReal j6array[8], cj6array[8], sj6array[8], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((IkReal(2.00000000000000))*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[8]={true,true,true,true,true,true,true,true};
_nj6 = 8;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst51;
gconst51=IKsign(((IkReal(3.00000000000000))+(((IkReal(53868.0000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(17956.0000000000))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x110=((IkReal(134.000000000000))*(sj3));
dummyeval[0]=((((npx)*(sj6)*(x110)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))+(((cj6)*(npy)*(x110))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x111=((IkReal(134.000000000000))*(sj3));
dummyeval[0]=((((cj6)*(npy)))+(((npx)*(sj6)))+(((cj6)*(npx)*(x111)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x111))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x112=(cj6)*(cj6);
IkReal x113=(npx)*(npx);
IkReal x114=(npy)*(npy);
IkReal x115=(sj6)*(sj6);
IkReal x116=((npx)*(sj6));
IkReal x117=((IkReal(201000.000000000))*(sj3));
IkReal x118=((cj6)*(npx));
IkReal x119=((cj6)*(npy));
IkReal x120=((npy)*(sj6));
IkReal x121=((IkReal(402000.000000000))*(sj3));
IkReal x122=((IkReal(500000.000000000))*(npx)*(npy));
IkReal x123=((IkReal(500000.000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((IkReal(1500.00000000000))*(x116)))+(((IkReal(1500.00000000000))*(x119)))+(((IkReal(-1.00000000000000))*(x117)*(x120)))+(((x117)*(x118))))) != 0)?((IkReal)1/(((((IkReal(1500.00000000000))*(x116)))+(((IkReal(1500.00000000000))*(x119)))+(((IkReal(-1.00000000000000))*(x117)*(x120)))+(((x117)*(x118)))))):(IkReal)1.0e30))*(((((x112)*(x122)))+(((IkReal(-1.00000000000000))*(x115)*(x122)))+(((x113)*(x123)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x114)*(x123))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x120)*(x121)))+(((IkReal(3000.00000000000))*(x116)))+(((IkReal(3000.00000000000))*(x119)))+(((x118)*(x121))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x120)*(x121)))+(((IkReal(3000.00000000000))*(x116)))+(((IkReal(3000.00000000000))*(x119)))+(((x118)*(x121)))))):(IkReal)1.0e30))*(((IkReal(9.00000000000000))+(((IkReal(-1000000.00000000))*(x114)*(x115)))+(((IkReal(2000000.00000000))*(x116)*(x119)))+(((IkReal(-1000000.00000000))*(x112)*(x113))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(1500.00000000000))*(x116)))+(((IkReal(1500.00000000000))*(x119)))+(((IkReal(-1.00000000000000))*(x117)*(x120)))+(((x117)*(x118))))) != 0)?((IkReal)1/(((((IkReal(1500.00000000000))*(x116)))+(((IkReal(1500.00000000000))*(x119)))+(((IkReal(-1.00000000000000))*(x117)*(x120)))+(((x117)*(x118)))))):(IkReal)1.0e30))*(((((x112)*(x122)))+(((IkReal(-1.00000000000000))*(x115)*(x122)))+(((x113)*(x123)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x114)*(x123)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x120)*(x121)))+(((IkReal(3000.00000000000))*(x116)))+(((IkReal(3000.00000000000))*(x119)))+(((x118)*(x121))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x120)*(x121)))+(((IkReal(3000.00000000000))*(x116)))+(((IkReal(3000.00000000000))*(x119)))+(((x118)*(x121)))))):(IkReal)1.0e30))*(((IkReal(9.00000000000000))+(((IkReal(-1000000.00000000))*(x114)*(x115)))+(((IkReal(2000000.00000000))*(x116)*(x119)))+(((IkReal(-1000000.00000000))*(x112)*(x113)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(1500.00000000000))*(x116)))+(((IkReal(1500.00000000000))*(x119)))+(((IkReal(-1.00000000000000))*(x117)*(x120)))+(((x117)*(x118))))) != 0)?((IkReal)1/(((((IkReal(1500.00000000000))*(x116)))+(((IkReal(1500.00000000000))*(x119)))+(((IkReal(-1.00000000000000))*(x117)*(x120)))+(((x117)*(x118)))))):(IkReal)1.0e30))*(((((x112)*(x122)))+(((IkReal(-1.00000000000000))*(x115)*(x122)))+(((x113)*(x123)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x114)*(x123)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(x120)*(x121)))+(((IkReal(3000.00000000000))*(x116)))+(((IkReal(3000.00000000000))*(x119)))+(((x118)*(x121))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x120)*(x121)))+(((IkReal(3000.00000000000))*(x116)))+(((IkReal(3000.00000000000))*(x119)))+(((x118)*(x121)))))):(IkReal)1.0e30))*(((IkReal(9.00000000000000))+(((IkReal(-1000000.00000000))*(x114)*(x115)))+(((IkReal(2000000.00000000))*(x116)*(x119)))+(((IkReal(-1000000.00000000))*(x112)*(x113)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x124=IKcos(j4);
IkReal x125=IKsin(j4);
IkReal x126=((IkReal(0.402000000000000))*(sj3));
IkReal x127=((IkReal(1.00000000000000))*(npy));
IkReal x128=((sj6)*(x124));
IkReal x129=((npx)*(x125));
IkReal x130=((cj6)*(x124));
evalcond[0]=((((cj6)*(npy)))+(((npx)*(sj6)))+(((IkReal(-1.00000000000000))*(x125)*(x126)))+(((IkReal(-0.00300000000000000))*(x124))));
evalcond[1]=((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(sj6)*(x127)))+(((x124)*(x126)))+(((IkReal(-0.00300000000000000))*(x125))));
evalcond[2]=((IkReal(-0.00300000000000000))+(((npx)*(x128)))+(((cj6)*(x129)))+(((IkReal(-1.00000000000000))*(sj6)*(x125)*(x127)))+(((npy)*(x130))));
evalcond[3]=((((npx)*(x130)))+(x126)+(((IkReal(-1.00000000000000))*(cj6)*(x125)*(x127)))+(((IkReal(-1.00000000000000))*(sj6)*(x129)))+(((IkReal(-1.00000000000000))*(x127)*(x128))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x283=(npy)*(npy);
IkReal x284=(sj6)*(sj6);
IkReal x285=(npx)*(npx);
IkReal x286=(cj6)*(cj6);
IkReal x287=((cj6)*(npy));
IkReal x288=((IkReal(201000.000000000))*(sj3));
IkReal x289=((npx)*(sj6));
IkReal x290=((npy)*(sj6));
IkReal x291=((cj6)*(npx));
IkReal x292=((IkReal(402000.000000000))*(sj3));
IkReal x293=((IkReal(500000.000000000))*(npx)*(npy));
IkReal x294=((IkReal(500000.000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((IkReal(3000.00000000000))*(x290)))+(((x289)*(x292)))+(((x287)*(x292)))+(((IkReal(-3000.00000000000))*(x291))))) != 0)?((IkReal)1/(((((IkReal(3000.00000000000))*(x290)))+(((x289)*(x292)))+(((x287)*(x292)))+(((IkReal(-3000.00000000000))*(x291)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(1000000.00000000))*(x283)*(x286)))+(((IkReal(2000000.00000000))*(x287)*(x289)))+(((IkReal(1000000.00000000))*(x284)*(x285))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1500.00000000000))*(x291)))+(((x288)*(x289)))+(((IkReal(1500.00000000000))*(x290)))+(((x287)*(x288))))) != 0)?((IkReal)1/(((((IkReal(-1500.00000000000))*(x291)))+(((x288)*(x289)))+(((IkReal(1500.00000000000))*(x290)))+(((x287)*(x288)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x285)*(x294)))+(((IkReal(-1.00000000000000))*(x286)*(x293)))+(((x283)*(x294)))+(((x284)*(x293)))+(((IkReal(603.000000000000))*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(3000.00000000000))*(x290)))+(((x289)*(x292)))+(((x287)*(x292)))+(((IkReal(-3000.00000000000))*(x291))))) != 0)?((IkReal)1/(((((IkReal(3000.00000000000))*(x290)))+(((x289)*(x292)))+(((x287)*(x292)))+(((IkReal(-3000.00000000000))*(x291)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(1000000.00000000))*(x283)*(x286)))+(((IkReal(2000000.00000000))*(x287)*(x289)))+(((IkReal(1000000.00000000))*(x284)*(x285)))))))+IKsqr(((((IKabs(((((IkReal(-1500.00000000000))*(x291)))+(((x288)*(x289)))+(((IkReal(1500.00000000000))*(x290)))+(((x287)*(x288))))) != 0)?((IkReal)1/(((((IkReal(-1500.00000000000))*(x291)))+(((x288)*(x289)))+(((IkReal(1500.00000000000))*(x290)))+(((x287)*(x288)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x285)*(x294)))+(((IkReal(-1.00000000000000))*(x286)*(x293)))+(((x283)*(x294)))+(((x284)*(x293)))+(((IkReal(603.000000000000))*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(3000.00000000000))*(x290)))+(((x289)*(x292)))+(((x287)*(x292)))+(((IkReal(-3000.00000000000))*(x291))))) != 0)?((IkReal)1/(((((IkReal(3000.00000000000))*(x290)))+(((x289)*(x292)))+(((x287)*(x292)))+(((IkReal(-3000.00000000000))*(x291)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(1000000.00000000))*(x283)*(x286)))+(((IkReal(2000000.00000000))*(x287)*(x289)))+(((IkReal(1000000.00000000))*(x284)*(x285)))))), ((((IKabs(((((IkReal(-1500.00000000000))*(x291)))+(((x288)*(x289)))+(((IkReal(1500.00000000000))*(x290)))+(((x287)*(x288))))) != 0)?((IkReal)1/(((((IkReal(-1500.00000000000))*(x291)))+(((x288)*(x289)))+(((IkReal(1500.00000000000))*(x290)))+(((x287)*(x288)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x285)*(x294)))+(((IkReal(-1.00000000000000))*(x286)*(x293)))+(((x283)*(x294)))+(((x284)*(x293)))+(((IkReal(603.000000000000))*(sj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x295=IKcos(j4);
IkReal x296=IKsin(j4);
IkReal x297=((IkReal(0.402000000000000))*(sj3));
IkReal x298=((IkReal(1.00000000000000))*(npy));
IkReal x299=((sj6)*(x295));
IkReal x300=((npx)*(x296));
IkReal x301=((cj6)*(x295));
evalcond[0]=((((cj6)*(npy)))+(((npx)*(sj6)))+(((IkReal(-1.00000000000000))*(x296)*(x297)))+(((IkReal(-0.00300000000000000))*(x295))));
evalcond[1]=((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(sj6)*(x298)))+(((x295)*(x297)))+(((IkReal(-0.00300000000000000))*(x296))));
evalcond[2]=((IkReal(-0.00300000000000000))+(((cj6)*(x300)))+(((npy)*(x301)))+(((IkReal(-1.00000000000000))*(sj6)*(x296)*(x298)))+(((npx)*(x299))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj6)*(x296)*(x298)))+(x297)+(((IkReal(-1.00000000000000))*(x298)*(x299)))+(((IkReal(-1.00000000000000))*(sj6)*(x300)))+(((npx)*(x301))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x302=((IkReal(1000.00000000000))*(npx));
IkReal x303=((IkReal(1000.00000000000))*(npy));
IkReal x304=((IkReal(134000.000000000))*(sj3)*(sj6));
IkReal x305=((IkReal(134000.000000000))*(cj6)*(sj3));
if( IKabs(((gconst51)*(((((cj6)*(x302)))+(((IkReal(-1.00000000000000))*(sj6)*(x303)))+(((npy)*(x305)))+(((npx)*(x304))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((((cj6)*(x303)))+(((npy)*(x304)))+(((IkReal(-1.00000000000000))*(npx)*(x305)))+(((sj6)*(x302))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst51)*(((((cj6)*(x302)))+(((IkReal(-1.00000000000000))*(sj6)*(x303)))+(((npy)*(x305)))+(((npx)*(x304)))))), ((gconst51)*(((((cj6)*(x303)))+(((npy)*(x304)))+(((IkReal(-1.00000000000000))*(npx)*(x305)))+(((sj6)*(x302)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x306=IKcos(j4);
IkReal x307=IKsin(j4);
IkReal x308=((IkReal(0.402000000000000))*(sj3));
IkReal x309=((IkReal(1.00000000000000))*(npy));
IkReal x310=((sj6)*(x306));
IkReal x311=((npx)*(x307));
IkReal x312=((cj6)*(x306));
evalcond[0]=((((IkReal(-0.00300000000000000))*(x306)))+(((cj6)*(npy)))+(((npx)*(sj6)))+(((IkReal(-1.00000000000000))*(x307)*(x308))));
evalcond[1]=((((IkReal(-0.00300000000000000))*(x307)))+(((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(sj6)*(x309)))+(((x306)*(x308))));
evalcond[2]=((IkReal(-0.00300000000000000))+(((npy)*(x312)))+(((IkReal(-1.00000000000000))*(sj6)*(x307)*(x309)))+(((cj6)*(x311)))+(((npx)*(x310))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj6)*(x307)*(x309)))+(x308)+(((npx)*(x312)))+(((IkReal(-1.00000000000000))*(x309)*(x310)))+(((IkReal(-1.00000000000000))*(sj6)*(x311))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}

} else
{
IkReal x313=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.316062000000000))+(((IkReal(0.315972000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x313))));
evalcond[2]=((IkReal(0.00716400000000000))+(((IkReal(-0.786000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x313))));
evalcond[3]=((IkReal(0.393000000000000))+(npz)+(((IkReal(0.402000000000000))*(cj3))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=((IkReal(-0.00300000000000000))+(npy));
IkReal gconst53;
gconst53=((IkReal(-0.804000000000000))*(sj3));
IkReal gconst54;
gconst54=((IkReal(0.00300000000000000))+(npy));
IkReal gconst55;
gconst55=((IkReal(-0.00300000000000000))+(npy));
IkReal gconst56;
gconst56=((IkReal(-2.00000000000000))*(npx));
IkReal gconst57;
gconst57=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst58;
gconst58=((IkReal(-0.00300000000000000))+(npy));
IkReal gconst59;
gconst59=((IkReal(-0.804000000000000))*(sj3));
IkReal gconst60;
gconst60=((IkReal(0.00300000000000000))+(npy));
IkReal gconst61;
gconst61=((IkReal(-0.00300000000000000))+(npy));
IkReal gconst62;
gconst62=((IkReal(-2.00000000000000))*(npx));
IkReal gconst63;
gconst63=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst64;
gconst64=((IkReal(2.00000000000000))*(npx));
IkReal gconst65;
gconst65=((IkReal(2.00000000000000))*(npx));
IkReal gconst66;
gconst66=((IkReal(2.00000000000000))*(npx));
IkReal gconst67;
gconst67=((IkReal(4.00000000000000))*(npy));
IkReal gconst68;
gconst68=((IkReal(-2.00000000000000))*(npx));
IkReal gconst69;
gconst69=((IkReal(2.00000000000000))*(npx));
IkReal gconst70;
gconst70=((IkReal(2.00000000000000))*(npx));
IkReal gconst71;
gconst71=((IkReal(2.00000000000000))*(npx));
IkReal gconst72;
gconst72=((IkReal(4.00000000000000))*(npy));
IkReal gconst73;
gconst73=((IkReal(-2.00000000000000))*(npx));
IkReal gconst74;
gconst74=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst75;
gconst75=((IkReal(-0.804000000000000))*(sj3));
IkReal gconst76;
gconst76=((IkReal(0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst77;
gconst77=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst78;
gconst78=((IkReal(2.00000000000000))*(npx));
IkReal gconst79;
gconst79=((IkReal(-0.00300000000000000))+(npy));
IkReal gconst80;
gconst80=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst81;
gconst81=((IkReal(-0.804000000000000))*(sj3));
IkReal gconst82;
gconst82=((IkReal(0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst83;
gconst83=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(npy))));
IkReal gconst84;
gconst84=((IkReal(2.00000000000000))*(npx));
IkReal gconst85;
gconst85=((IkReal(-0.00300000000000000))+(npy));
IkReal x314=((IkReal(1.00000000000000))*(gconst79));
IkReal x315=((gconst80)*(gconst85));
IkReal x316=((gconst81)*(gconst83));
IkReal x317=((gconst82)*(gconst83));
IkReal x318=((gconst80)*(gconst84));
IkReal x319=((gconst76)*(gconst78));
IkReal x320=((gconst76)*(gconst77));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x317)*(x320)))+(((gconst74)*(gconst79)*(x317)))+(((gconst75)*(gconst79)*(x318)))+(((IkReal(-1.00000000000000))*(x318)*(x319)))+(((x315)*(x320)))+(((IkReal(-1.00000000000000))*(gconst75)*(x314)*(x316)))+(((x316)*(x319)))+(((IkReal(-1.00000000000000))*(gconst74)*(x314)*(x315))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x321=((gconst79)*(gconst80));
IkReal x322=((IkReal(1.00000000000000))*(gconst74));
IkReal x323=((gconst54)*(gconst66));
IkReal x324=((gconst58)*(gconst63));
IkReal x325=((IkReal(1.00000000000000))*(gconst54));
IkReal x326=((gconst58)*(gconst62));
IkReal x327=((gconst54)*(gconst55));
IkReal x328=((gconst60)*(gconst71));
IkReal x329=((gconst52)*(gconst61));
IkReal x330=((gconst58)*(gconst73));
IkReal x331=((gconst68)*(gconst75));
IkReal x332=((gconst80)*(gconst84));
IkReal x333=((gconst55)*(gconst65));
IkReal x334=((gconst78)*(gconst81));
IkReal x335=((gconst75)*(gconst84));
IkReal x336=((gconst80)*(gconst85));
IkReal x337=((gconst53)*(gconst57));
IkReal x338=((gconst58)*(gconst72));
IkReal x339=((IkReal(1.00000000000000))*(gconst76));
IkReal x340=((gconst82)*(gconst83));
IkReal x341=((gconst52)*(gconst57));
IkReal x342=((gconst57)*(gconst60));
IkReal x343=((gconst69)*(gconst85));
IkReal x344=((gconst76)*(gconst77));
IkReal x345=((gconst75)*(gconst79));
IkReal x346=((IkReal(1.00000000000000))*(gconst65));
IkReal x347=((IkReal(1.00000000000000))*(gconst64));
IkReal x348=((gconst62)*(gconst69));
IkReal x349=((IkReal(1.00000000000000))*(gconst68));
IkReal x350=((gconst59)*(gconst61));
IkReal x351=((gconst63)*(gconst69));
IkReal x352=((gconst77)*(gconst83));
IkReal x353=((gconst76)*(gconst83));
IkReal x354=((IkReal(1.00000000000000))*(gconst60)*(gconst61));
IkReal x355=((gconst77)*(x336));
IkReal x356=((gconst82)*(x339));
IkReal x357=((gconst74)*(gconst79)*(gconst83));
IkReal x358=((gconst56)*(x350));
IkReal x359=((IkReal(1.00000000000000))*(gconst81)*(gconst83));
IkReal x360=((IkReal(1.00000000000000))*(gconst59)*(x337));
op[0]=((((x336)*(x344)))+(((IkReal(-1.00000000000000))*(x345)*(x359)))+(((x334)*(x353)))+(((IkReal(-1.00000000000000))*(gconst85)*(x321)*(x322)))+(((IkReal(-1.00000000000000))*(gconst77)*(x339)*(x340)))+(((gconst74)*(gconst79)*(x340)))+(((IkReal(-1.00000000000000))*(gconst78)*(x332)*(x339)))+(((x321)*(x335))));
op[1]=((((IkReal(-1.00000000000000))*(x331)*(x359)))+(((IkReal(-1.00000000000000))*(gconst85)*(x321)*(x347)))+(((IkReal(-1.00000000000000))*(gconst72)*(gconst78)*(gconst80)*(x339)))+(((IkReal(-1.00000000000000))*(gconst71)*(gconst81)*(x345)))+(((gconst66)*(gconst76)*(x336)))+(((IkReal(-1.00000000000000))*(gconst70)*(x339)*(x352)))+(((IkReal(-1.00000000000000))*(gconst69)*(gconst78)*(gconst84)*(x339)))+(((gconst71)*(gconst76)*(x334)))+(((x331)*(x332)))+(((gconst65)*(x355)))+(((IkReal(-1.00000000000000))*(gconst73)*(x321)*(x322)))+(((gconst70)*(x357)))+(((gconst71)*(gconst74)*(gconst79)*(gconst82)))+(((gconst68)*(gconst74)*(x340)))+(((gconst69)*(gconst79)*(x335)))+(((gconst72)*(gconst75)*(x321)))+(((IkReal(-1.00000000000000))*(gconst67)*(x332)*(x339)))+(((gconst65)*(gconst83)*(x334)))+(((IkReal(-1.00000000000000))*(gconst79)*(x322)*(x343)))+(((IkReal(-1.00000000000000))*(gconst68)*(x322)*(x336)))+(((gconst64)*(gconst79)*(x340)))+(((IkReal(-1.00000000000000))*(gconst71)*(gconst77)*(x356)))+(((x343)*(x344)))+(((gconst73)*(gconst80)*(x344)))+(((gconst67)*(gconst81)*(x353)))+(((IkReal(-1.00000000000000))*(gconst78)*(x332)*(x346)))+(((IkReal(-1.00000000000000))*(gconst77)*(x340)*(x346)))+(((IkReal(-1.00000000000000))*(gconst66)*(x339)*(x340))));
op[2]=((((IkReal(-1.00000000000000))*(gconst70)*(gconst71)*(gconst76)*(gconst77)))+(((gconst69)*(gconst72)*(gconst75)*(gconst79)))+(((gconst65)*(gconst69)*(gconst77)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst66)*(gconst71)*(gconst76)*(gconst82)))+(((gconst60)*(gconst74)*(gconst79)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst78)*(gconst80)*(gconst84)))+(((gconst64)*(gconst70)*(gconst79)*(gconst83)))+(((gconst66)*(gconst69)*(gconst76)*(gconst85)))+(((gconst54)*(gconst78)*(gconst81)*(gconst83)))+(((gconst64)*(gconst68)*(gconst82)*(gconst83)))+(((gconst55)*(gconst76)*(gconst80)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst64)*(gconst69)*(gconst79)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst66)*(gconst70)*(gconst76)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst72)*(gconst78)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst71)*(gconst77)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst64)*(gconst73)*(gconst79)*(gconst80)))+(((gconst68)*(gconst70)*(gconst74)*(gconst83)))+(((gconst63)*(gconst76)*(gconst77)*(gconst80)))+(((gconst68)*(gconst72)*(gconst75)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst79)*(gconst81)*(gconst83)))+(((gconst56)*(gconst76)*(gconst81)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst70)*(gconst77)*(gconst83)))+(((gconst52)*(gconst79)*(gconst82)*(gconst83)))+(((gconst69)*(gconst73)*(gconst76)*(gconst77)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst76)*(gconst82)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst66)*(gconst82)*(gconst83)))+(((gconst53)*(gconst79)*(gconst80)*(gconst84)))+(((gconst66)*(gconst73)*(gconst76)*(gconst80)))+(((gconst64)*(gconst71)*(gconst79)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst69)*(gconst72)*(gconst76)*(gconst78)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst74)*(gconst79)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst74)*(gconst80)*(gconst85)))+(((gconst65)*(gconst71)*(gconst78)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst61)*(gconst75)*(gconst79)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst76)*(gconst80)*(gconst84)))+(((gconst54)*(gconst77)*(gconst80)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst67)*(gconst72)*(gconst76)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst68)*(gconst73)*(gconst74)*(gconst80)))+(((gconst68)*(gconst71)*(gconst74)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst64)*(gconst68)*(gconst80)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst75)*(gconst81)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst76)*(gconst78)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst67)*(gconst80)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst68)*(gconst69)*(gconst74)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst68)*(gconst71)*(gconst75)*(gconst81)))+(((gconst65)*(gconst66)*(gconst80)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst77)*(gconst82)*(gconst83)))+(((gconst68)*(gconst69)*(gconst75)*(gconst84)))+(((gconst59)*(gconst76)*(gconst78)*(gconst83)))+(((gconst57)*(gconst75)*(gconst80)*(gconst84)))+(((gconst65)*(gconst73)*(gconst77)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst69)*(gconst73)*(gconst74)*(gconst79)))+(((gconst58)*(gconst76)*(gconst77)*(gconst85)))+(((gconst57)*(gconst74)*(gconst82)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst62)*(gconst76)*(gconst78)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst63)*(gconst74)*(gconst79)*(gconst80)))+(((gconst61)*(gconst76)*(gconst78)*(gconst81)))+(((gconst65)*(gconst67)*(gconst81)*(gconst83)))+(((gconst70)*(gconst71)*(gconst74)*(gconst79)))+(((gconst58)*(gconst75)*(gconst79)*(gconst84)))+(((gconst61)*(gconst74)*(gconst79)*(gconst82)))+(((gconst67)*(gconst71)*(gconst76)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst59)*(gconst75)*(gconst79)*(gconst83)))+(((gconst62)*(gconst75)*(gconst79)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst60)*(gconst76)*(gconst77)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst67)*(gconst69)*(gconst76)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst69)*(gconst78)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst79)*(gconst80)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst61)*(gconst76)*(gconst77)*(gconst82))));
op[3]=((((IkReal(-1.00000000000000))*(gconst65)*(gconst66)*(gconst70)*(gconst83)))+(((gconst57)*(gconst64)*(gconst82)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst69)*(gconst79)*(gconst85)))+(((gconst55)*(gconst73)*(gconst76)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst66)*(gconst70)*(gconst71)*(gconst76)))+(((gconst64)*(gconst68)*(gconst71)*(gconst82)))+(((gconst55)*(gconst65)*(gconst80)*(gconst85)))+(((gconst53)*(gconst69)*(gconst79)*(gconst84)))+(((gconst57)*(gconst72)*(gconst75)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst67)*(gconst69)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst69)*(gconst74)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst61)*(gconst65)*(gconst77)*(gconst82)))+(((gconst52)*(gconst68)*(gconst82)*(gconst83)))+(((gconst60)*(gconst71)*(gconst74)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst66)*(gconst82)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst70)*(gconst76)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst68)*(gconst74)*(gconst85)))+(((gconst65)*(gconst66)*(gconst73)*(gconst80)))+(((gconst63)*(gconst69)*(gconst76)*(gconst77)))+(((IkReal(-1.00000000000000))*(gconst61)*(gconst68)*(gconst75)*(gconst81)))+(((gconst52)*(gconst71)*(gconst79)*(gconst82)))+(((gconst57)*(gconst70)*(gconst74)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst59)*(gconst68)*(gconst75)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst67)*(gconst72)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst67)*(gconst76)*(gconst84)))+(((gconst52)*(gconst70)*(gconst79)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst65)*(gconst78)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst61)*(gconst70)*(gconst76)*(gconst77)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst72)*(gconst76)*(gconst78)))+(((gconst62)*(gconst69)*(gconst75)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst62)*(gconst65)*(gconst78)*(gconst80)))+(((gconst65)*(gconst69)*(gconst73)*(gconst77)))+(((gconst58)*(gconst65)*(gconst77)*(gconst85)))+(((gconst54)*(gconst66)*(gconst80)*(gconst85)))+(((gconst59)*(gconst67)*(gconst76)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst71)*(gconst79)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst68)*(gconst69)*(gconst73)*(gconst74)))+(((IkReal(-1.00000000000000))*(gconst60)*(gconst65)*(gconst77)*(gconst83)))+(((gconst58)*(gconst72)*(gconst75)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst70)*(gconst71)*(gconst77)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst69)*(gconst72)*(gconst78)))+(((IkReal(-1.00000000000000))*(gconst63)*(gconst69)*(gconst74)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst69)*(gconst78)*(gconst84)))+(((gconst64)*(gconst68)*(gconst70)*(gconst83)))+(((gconst63)*(gconst65)*(gconst77)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst63)*(gconst64)*(gconst79)*(gconst80)))+(((gconst57)*(gconst71)*(gconst74)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst64)*(gconst68)*(gconst69)*(gconst85)))+(((gconst62)*(gconst68)*(gconst75)*(gconst80)))+(((gconst68)*(gconst69)*(gconst72)*(gconst75)))+(((gconst54)*(gconst69)*(gconst77)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst65)*(gconst80)*(gconst84)))+(((gconst61)*(gconst64)*(gconst79)*(gconst82)))+(((gconst54)*(gconst71)*(gconst78)*(gconst81)))+(((gconst66)*(gconst69)*(gconst73)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst60)*(gconst71)*(gconst76)*(gconst77)))+(((gconst54)*(gconst73)*(gconst77)*(gconst80)))+(((gconst63)*(gconst66)*(gconst76)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst71)*(gconst77)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst66)*(gconst71)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst62)*(gconst67)*(gconst76)*(gconst80)))+(((gconst58)*(gconst66)*(gconst76)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst65)*(gconst82)*(gconst83)))+(((gconst53)*(gconst72)*(gconst79)*(gconst80)))+(((gconst60)*(gconst68)*(gconst74)*(gconst83)))+(((gconst68)*(gconst70)*(gconst71)*(gconst74)))+(((IkReal(-1.00000000000000))*(gconst62)*(gconst69)*(gconst76)*(gconst78)))+(((IkReal(-1.00000000000000))*(gconst61)*(gconst66)*(gconst76)*(gconst82)))+(((gconst61)*(gconst68)*(gconst74)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst60)*(gconst66)*(gconst76)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst64)*(gconst68)*(gconst73)*(gconst80)))+(((gconst59)*(gconst65)*(gconst78)*(gconst83)))+(((gconst60)*(gconst64)*(gconst79)*(gconst83)))+(((gconst61)*(gconst70)*(gconst74)*(gconst79)))+(((gconst61)*(gconst67)*(gconst76)*(gconst81)))+(((gconst64)*(gconst70)*(gconst71)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst72)*(gconst76)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst73)*(gconst79)*(gconst80)))+(((gconst53)*(gconst68)*(gconst80)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst72)*(gconst78)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst71)*(gconst75)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst73)*(gconst74)*(gconst79)))+(((gconst58)*(gconst68)*(gconst75)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst71)*(gconst76)*(gconst82)))+(((gconst65)*(gconst67)*(gconst71)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst59)*(gconst71)*(gconst75)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst68)*(gconst80)*(gconst85)))+(((gconst59)*(gconst71)*(gconst76)*(gconst78)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst68)*(gconst81)*(gconst83)))+(((gconst61)*(gconst65)*(gconst78)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst73)*(gconst74)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst69)*(gconst76)*(gconst84)))+(((gconst57)*(gconst69)*(gconst75)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst67)*(gconst80)*(gconst84)))+(((gconst58)*(gconst73)*(gconst76)*(gconst77)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst64)*(gconst79)*(gconst85)))+(((gconst54)*(gconst67)*(gconst81)*(gconst83)))+(((gconst56)*(gconst65)*(gconst81)*(gconst83)))+(((gconst56)*(gconst71)*(gconst76)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst63)*(gconst68)*(gconst74)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst70)*(gconst77)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst67)*(gconst69)*(gconst72)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst64)*(gconst69)*(gconst73)*(gconst79)))+(((gconst55)*(gconst69)*(gconst76)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst64)*(gconst80)*(gconst85)))+(((gconst65)*(gconst66)*(gconst69)*(gconst85))));
op[4]=((((gconst58)*(gconst62)*(gconst75)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst69)*(gconst73)*(gconst79)))+(((gconst61)*(gconst65)*(gconst67)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst62)*(gconst65)*(gconst69)*(gconst78)))+(((gconst61)*(gconst64)*(gconst68)*(gconst82)))+(((gconst54)*(gconst58)*(gconst77)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst58)*(gconst78)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst70)*(gconst71)*(gconst77)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst59)*(gconst75)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst61)*(gconst65)*(gconst66)*(gconst82)))+(((gconst55)*(gconst58)*(gconst76)*(gconst85)))+(((gconst57)*(gconst60)*(gconst74)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst63)*(gconst64)*(gconst68)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst60)*(gconst76)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst64)*(gconst68)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst58)*(gconst74)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst65)*(gconst67)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst61)*(gconst66)*(gconst70)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst60)*(gconst61)*(gconst76)*(gconst77)))+(((gconst57)*(gconst69)*(gconst72)*(gconst75)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst68)*(gconst69)*(gconst85)))+(((gconst55)*(gconst69)*(gconst73)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst67)*(gconst72)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst67)*(gconst72)*(gconst80)))+(((gconst57)*(gconst62)*(gconst75)*(gconst80)))+(((gconst58)*(gconst65)*(gconst66)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst57)*(gconst80)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst62)*(gconst78)*(gconst80)))+(((gconst59)*(gconst67)*(gconst71)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst65)*(gconst72)*(gconst78)))+(((gconst64)*(gconst68)*(gconst70)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst69)*(gconst73)*(gconst74)))+(((gconst55)*(gconst65)*(gconst69)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst66)*(gconst71)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst58)*(gconst76)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst65)*(gconst69)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst61)*(gconst65)*(gconst70)*(gconst77)))+(((gconst61)*(gconst68)*(gconst70)*(gconst74)))+(((gconst54)*(gconst63)*(gconst77)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst69)*(gconst72)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst56)*(gconst80)*(gconst84)))+(((gconst56)*(gconst61)*(gconst76)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst63)*(gconst74)*(gconst80)))+(((gconst53)*(gconst68)*(gconst69)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst61)*(gconst79)*(gconst81)))+(((gconst54)*(gconst56)*(gconst81)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst64)*(gconst69)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst63)*(gconst74)*(gconst79)))+(((gconst59)*(gconst65)*(gconst67)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst68)*(gconst73)*(gconst80)))+(((gconst55)*(gconst63)*(gconst76)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst63)*(gconst79)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst67)*(gconst69)*(gconst72)))+(((gconst60)*(gconst61)*(gconst74)*(gconst79)))+(((gconst53)*(gconst58)*(gconst79)*(gconst84)))+(((gconst54)*(gconst69)*(gconst73)*(gconst77)))+(((IkReal(-1.00000000000000))*(gconst59)*(gconst61)*(gconst75)*(gconst79)))+(((gconst54)*(gconst61)*(gconst78)*(gconst81)))+(((gconst52)*(gconst70)*(gconst71)*(gconst79)))+(((gconst60)*(gconst64)*(gconst71)*(gconst79)))+(((gconst55)*(gconst65)*(gconst73)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst60)*(gconst65)*(gconst66)*(gconst83)))+(((gconst58)*(gconst63)*(gconst76)*(gconst77)))+(((gconst58)*(gconst66)*(gconst73)*(gconst76)))+(((gconst54)*(gconst66)*(gconst69)*(gconst85)))+(((gconst63)*(gconst65)*(gconst66)*(gconst80)))+(((gconst53)*(gconst57)*(gconst80)*(gconst84)))+(((gconst57)*(gconst70)*(gconst71)*(gconst74)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst65)*(gconst71)*(gconst82)))+(((gconst54)*(gconst55)*(gconst80)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst59)*(gconst68)*(gconst71)*(gconst75)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst59)*(gconst79)*(gconst83)))+(((gconst56)*(gconst65)*(gconst71)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst57)*(gconst81)*(gconst83)))+(((gconst54)*(gconst66)*(gconst73)*(gconst80)))+(((gconst57)*(gconst58)*(gconst75)*(gconst84)))+(((gconst53)*(gconst69)*(gconst72)*(gconst79)))+(((gconst63)*(gconst65)*(gconst69)*(gconst77)))+(((gconst59)*(gconst61)*(gconst76)*(gconst78)))+(((gconst54)*(gconst67)*(gconst71)*(gconst81)))+(((gconst57)*(gconst64)*(gconst70)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst58)*(gconst79)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst68)*(gconst71)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst61)*(gconst75)*(gconst81)))+(((gconst58)*(gconst65)*(gconst73)*(gconst77)))+(((gconst52)*(gconst57)*(gconst82)*(gconst83)))+(((gconst54)*(gconst59)*(gconst78)*(gconst83)))+(((gconst52)*(gconst61)*(gconst79)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst62)*(gconst67)*(gconst69)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst62)*(gconst76)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst61)*(gconst77)*(gconst82)))+(((gconst52)*(gconst68)*(gconst71)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst70)*(gconst71)*(gconst76)))+(((gconst60)*(gconst68)*(gconst71)*(gconst74)))+(((gconst65)*(gconst66)*(gconst69)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst60)*(gconst77)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst65)*(gconst70)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst62)*(gconst65)*(gconst67)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst66)*(gconst70)*(gconst71)))+(((gconst62)*(gconst68)*(gconst69)*(gconst75)))+(((IkReal(-1.00000000000000))*(gconst60)*(gconst65)*(gconst71)*(gconst77)))+(((gconst52)*(gconst68)*(gconst70)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst64)*(gconst73)*(gconst80)))+(((gconst58)*(gconst68)*(gconst72)*(gconst75)))+(((gconst53)*(gconst62)*(gconst79)*(gconst80)))+(((gconst57)*(gconst64)*(gconst71)*(gconst82)))+(((gconst57)*(gconst61)*(gconst74)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst61)*(gconst76)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst64)*(gconst73)*(gconst79)))+(((gconst59)*(gconst65)*(gconst71)*(gconst78)))+(((gconst56)*(gconst59)*(gconst76)*(gconst83)))+(((gconst61)*(gconst64)*(gconst70)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst64)*(gconst68)*(gconst69)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst63)*(gconst64)*(gconst69)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst60)*(gconst66)*(gconst71)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst65)*(gconst72)*(gconst80)))+(((gconst53)*(gconst68)*(gconst72)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst68)*(gconst73)*(gconst74)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst69)*(gconst72)*(gconst78)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst62)*(gconst76)*(gconst78)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst55)*(gconst82)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst66)*(gconst70)*(gconst83)))+(((gconst60)*(gconst64)*(gconst68)*(gconst83)))+(((gconst52)*(gconst60)*(gconst79)*(gconst83)))+(((gconst63)*(gconst66)*(gconst69)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst67)*(gconst69)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst63)*(gconst68)*(gconst69)*(gconst74))));
op[5]=((((gconst57)*(gconst61)*(gconst70)*(gconst74)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst60)*(gconst66)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst60)*(gconst71)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst60)*(gconst61)*(gconst65)*(gconst77)))+(((gconst54)*(gconst55)*(gconst73)*(gconst80)))+(((gconst52)*(gconst57)*(gconst70)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst58)*(gconst72)*(gconst78)))+(((gconst57)*(gconst60)*(gconst64)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst63)*(gconst69)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst61)*(gconst68)*(gconst81)))+(((gconst60)*(gconst61)*(gconst64)*(gconst79)))+(((gconst53)*(gconst57)*(gconst72)*(gconst80)))+(((gconst57)*(gconst62)*(gconst69)*(gconst75)))+(((gconst59)*(gconst65)*(gconst67)*(gconst71)))+(((gconst57)*(gconst58)*(gconst72)*(gconst75)))+(((gconst56)*(gconst61)*(gconst65)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst64)*(gconst69)*(gconst73)))+(((gconst61)*(gconst64)*(gconst68)*(gconst70)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst59)*(gconst71)*(gconst75)))+(((gconst55)*(gconst65)*(gconst69)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst60)*(gconst65)*(gconst66)*(gconst71)))+(((gconst54)*(gconst63)*(gconst69)*(gconst77)))+(((gconst54)*(gconst66)*(gconst69)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst63)*(gconst68)*(gconst74)))+(((gconst53)*(gconst58)*(gconst68)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst65)*(gconst70)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst62)*(gconst69)*(gconst78)))+(((gconst56)*(gconst59)*(gconst65)*(gconst83)))+(((gconst54)*(gconst58)*(gconst66)*(gconst85)))+(((gconst53)*(gconst62)*(gconst69)*(gconst79)))+(((gconst58)*(gconst62)*(gconst68)*(gconst75)))+(((gconst52)*(gconst57)*(gconst71)*(gconst82)))+(((gconst52)*(gconst60)*(gconst68)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst62)*(gconst69)*(gconst76)))+(((gconst57)*(gconst60)*(gconst71)*(gconst74)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst58)*(gconst73)*(gconst74)))+(((gconst54)*(gconst63)*(gconst66)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst65)*(gconst69)*(gconst72)))+(((gconst54)*(gconst56)*(gconst71)*(gconst81)))+(((gconst58)*(gconst65)*(gconst66)*(gconst73)))+(((gconst55)*(gconst58)*(gconst73)*(gconst76)))+(((gconst59)*(gconst61)*(gconst65)*(gconst78)))+(((gconst57)*(gconst64)*(gconst70)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst60)*(gconst71)*(gconst77)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst62)*(gconst67)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst62)*(gconst65)*(gconst67)*(gconst69)))+(((gconst54)*(gconst61)*(gconst67)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst61)*(gconst66)*(gconst82)))+(((gconst53)*(gconst62)*(gconst68)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst63)*(gconst68)*(gconst80)))+(((gconst57)*(gconst61)*(gconst64)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst55)*(gconst70)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst58)*(gconst72)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst63)*(gconst64)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst68)*(gconst69)*(gconst73)))+(((gconst54)*(gconst59)*(gconst67)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst62)*(gconst65)*(gconst78)))+(((gconst53)*(gconst68)*(gconst69)*(gconst72)))+(((gconst58)*(gconst63)*(gconst66)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst63)*(gconst64)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst57)*(gconst71)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst57)*(gconst73)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst63)*(gconst69)*(gconst74)))+(((gconst58)*(gconst63)*(gconst65)*(gconst77)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst61)*(gconst70)*(gconst77)))+(((gconst55)*(gconst58)*(gconst65)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst59)*(gconst71)*(gconst79)))+(((gconst60)*(gconst61)*(gconst68)*(gconst74)))+(((gconst55)*(gconst63)*(gconst69)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst56)*(gconst69)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst58)*(gconst68)*(gconst85)))+(((gconst52)*(gconst61)*(gconst70)*(gconst79)))+(((gconst54)*(gconst55)*(gconst69)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst58)*(gconst65)*(gconst84)))+(((gconst52)*(gconst68)*(gconst70)*(gconst71)))+(((gconst63)*(gconst65)*(gconst66)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst55)*(gconst71)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst64)*(gconst68)*(gconst73)))+(((gconst55)*(gconst63)*(gconst65)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst59)*(gconst68)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst61)*(gconst65)*(gconst66)*(gconst70)))+(((IkReal(-1.00000000000000))*(gconst63)*(gconst64)*(gconst68)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst61)*(gconst70)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst58)*(gconst73)*(gconst79)))+(((gconst59)*(gconst61)*(gconst67)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst58)*(gconst64)*(gconst85)))+(((gconst53)*(gconst57)*(gconst69)*(gconst84)))+(((gconst54)*(gconst59)*(gconst71)*(gconst78)))+(((IkReal(-1.00000000000000))*(gconst59)*(gconst61)*(gconst68)*(gconst75)))+(((gconst52)*(gconst61)*(gconst68)*(gconst82)))+(((gconst52)*(gconst60)*(gconst71)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst58)*(gconst67)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst67)*(gconst69)*(gconst72)))+(((gconst60)*(gconst64)*(gconst68)*(gconst71)))+(((gconst56)*(gconst59)*(gconst71)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst60)*(gconst61)*(gconst66)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst60)*(gconst65)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst56)*(gconst72)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst62)*(gconst67)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst57)*(gconst69)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst66)*(gconst70)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst61)*(gconst65)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst65)*(gconst67)*(gconst72)))+(((gconst53)*(gconst58)*(gconst72)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst62)*(gconst65)*(gconst80)))+(((gconst54)*(gconst58)*(gconst73)*(gconst77))));
op[6]=((((gconst52)*(gconst60)*(gconst61)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst55)*(gconst60)*(gconst83)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst57)*(gconst58)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst60)*(gconst61)*(gconst77)))+(((gconst53)*(gconst57)*(gconst69)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst58)*(gconst64)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst55)*(gconst70)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst60)*(gconst61)*(gconst65)*(gconst66)))+(((gconst54)*(gconst59)*(gconst67)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst60)*(gconst61)*(gconst76)))+(((gconst60)*(gconst61)*(gconst64)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst56)*(gconst58)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst58)*(gconst62)*(gconst78)))+(((gconst54)*(gconst58)*(gconst63)*(gconst77)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst56)*(gconst69)*(gconst72)))+(((gconst57)*(gconst60)*(gconst64)*(gconst71)))+(((gconst53)*(gconst57)*(gconst58)*(gconst84)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst62)*(gconst67)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst62)*(gconst65)*(gconst69)))+(((gconst56)*(gconst59)*(gconst61)*(gconst76)))+(((gconst54)*(gconst56)*(gconst61)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst58)*(gconst67)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst59)*(gconst61)*(gconst75)))+(((gconst54)*(gconst55)*(gconst63)*(gconst80)))+(((gconst59)*(gconst61)*(gconst65)*(gconst67)))+(((gconst53)*(gconst57)*(gconst62)*(gconst80)))+(((gconst57)*(gconst60)*(gconst61)*(gconst74)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst61)*(gconst66)*(gconst70)))+(((gconst54)*(gconst58)*(gconst66)*(gconst73)))+(((gconst54)*(gconst55)*(gconst69)*(gconst73)))+(((gconst55)*(gconst58)*(gconst65)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst62)*(gconst65)*(gconst67)))+(((gconst54)*(gconst55)*(gconst58)*(gconst85)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst58)*(gconst65)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst59)*(gconst68)*(gconst71)))+(((gconst54)*(gconst59)*(gconst61)*(gconst78)))+(((gconst54)*(gconst63)*(gconst66)*(gconst69)))+(((gconst53)*(gconst62)*(gconst68)*(gconst69)))+(((gconst58)*(gconst63)*(gconst65)*(gconst66)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst63)*(gconst64)*(gconst68)))+(((gconst52)*(gconst60)*(gconst68)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst58)*(gconst63)*(gconst79)))+(((gconst54)*(gconst56)*(gconst59)*(gconst83)))+(((gconst52)*(gconst61)*(gconst68)*(gconst70)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst57)*(gconst63)*(gconst80)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst58)*(gconst68)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst56)*(gconst62)*(gconst80)))+(((gconst57)*(gconst58)*(gconst62)*(gconst75)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst60)*(gconst65)*(gconst71)))+(((gconst55)*(gconst58)*(gconst63)*(gconst76)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst57)*(gconst69)*(gconst73)))+(((gconst52)*(gconst57)*(gconst70)*(gconst71)))+(((gconst57)*(gconst61)*(gconst64)*(gconst70)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst60)*(gconst66)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst61)*(gconst65)*(gconst70)))+(((gconst53)*(gconst58)*(gconst62)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst58)*(gconst62)*(gconst76)))+(((gconst52)*(gconst57)*(gconst61)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst57)*(gconst61)*(gconst81)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst59)*(gconst61)*(gconst79)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst57)*(gconst59)*(gconst83)))+(((gconst53)*(gconst58)*(gconst68)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst55)*(gconst61)*(gconst82)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst63)*(gconst64)*(gconst69)))+(((gconst52)*(gconst57)*(gconst60)*(gconst83)))+(((gconst56)*(gconst59)*(gconst65)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst58)*(gconst63)*(gconst74)))+(((gconst55)*(gconst63)*(gconst65)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst63)*(gconst68)*(gconst69))));
op[7]=((((IkReal(-1.00000000000000))*(gconst56)*(x325)*(x348)))+(((IkReal(-1.00000000000000))*(x333)*(x354)))+(((x323)*(x324)))+(((IkReal(-1.00000000000000))*(gconst56)*(x326)*(x346)))+(((IkReal(-1.00000000000000))*(x341)*(x351)))+(((gconst54)*(gconst67)*(x350)))+(((x337)*(x348)))+(((x337)*(x338)))+(((gconst53)*(gconst68)*(x326)))+(((x327)*(x351)))+(((gconst65)*(x358)))+(((x324)*(x333)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst61)*(gconst70)*(x325)))+(((IkReal(-1.00000000000000))*(gconst53)*(x349)*(x350)))+(((gconst57)*(gconst70)*(x329)))+(((IkReal(-1.00000000000000))*(gconst56)*(x325)*(x338)))+(((IkReal(-1.00000000000000))*(gconst57)*(x324)*(x347)))+(((gconst54)*(gconst56)*(gconst59)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst55)*(x325)*(x328)))+(((IkReal(-1.00000000000000))*(x323)*(x354)))+(((gconst61)*(gconst64)*(x342)))+(((x327)*(x330)))+(((gconst60)*(gconst68)*(x329)))+(((IkReal(-1.00000000000000))*(gconst71)*(x360)))+(((IkReal(-1.00000000000000))*(gconst52)*(x324)*(x349)))+(((x328)*(x341)))+(((IkReal(-1.00000000000000))*(x330)*(x341)))+(((IkReal(-1.00000000000000))*(gconst67)*(x325)*(x326))));
op[8]=((((IkReal(-1.00000000000000))*(x324)*(x341)))+(((IkReal(-1.00000000000000))*(gconst56)*(x325)*(x326)))+(((gconst54)*(x358)))+(((x329)*(x342)))+(((IkReal(-1.00000000000000))*(x337)*(x350)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst60)*(gconst61)*(x325)))+(((x324)*(x327)))+(((x326)*(x337))));
polyroots8(op,zeror,numroots);
IkReal j6array[8], cj6array[8], sj6array[8], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((IkReal(2.00000000000000))*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[8]={true,true,true,true,true,true,true,true};
_nj6 = 8;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst102;
gconst102=IKsign(((IkReal(3.00000000000000))+(((IkReal(53868.0000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(17956.0000000000))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x361=((IkReal(134.000000000000))*(sj3));
dummyeval[0]=((((cj6)*(npx)))+(((npx)*(sj6)*(x361)))+(((cj6)*(npy)*(x361)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x362=((IkReal(134.000000000000))*(sj3));
dummyeval[0]=((((cj6)*(npy)))+(((npx)*(sj6)))+(((npy)*(sj6)*(x362)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x362))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x363=(cj6)*(cj6);
IkReal x364=(npx)*(npx);
IkReal x365=(npy)*(npy);
IkReal x366=(sj6)*(sj6);
IkReal x367=((npx)*(sj6));
IkReal x368=((IkReal(201000.000000000))*(sj3));
IkReal x369=((cj6)*(npx));
IkReal x370=((cj6)*(npy));
IkReal x371=((npy)*(sj6));
IkReal x372=((IkReal(402000.000000000))*(sj3));
IkReal x373=((IkReal(500000.000000000))*(npx)*(npy));
IkReal x374=((IkReal(500000.000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((IkReal(1500.00000000000))*(x370)))+(((IkReal(1500.00000000000))*(x367)))+(((x368)*(x371)))+(((IkReal(-1.00000000000000))*(x368)*(x369))))) != 0)?((IkReal)1/(((((IkReal(1500.00000000000))*(x370)))+(((IkReal(1500.00000000000))*(x367)))+(((x368)*(x371)))+(((IkReal(-1.00000000000000))*(x368)*(x369)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x363)*(x373)))+(((x365)*(x374)))+(((x366)*(x373)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x364)*(x374))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(3000.00000000000))*(x367)))+(((IkReal(-1.00000000000000))*(x369)*(x372)))+(((IkReal(3000.00000000000))*(x370)))+(((x371)*(x372))))) != 0)?((IkReal)1/(((((IkReal(3000.00000000000))*(x367)))+(((IkReal(-1.00000000000000))*(x369)*(x372)))+(((IkReal(3000.00000000000))*(x370)))+(((x371)*(x372)))))):(IkReal)1.0e30))*(((IkReal(9.00000000000000))+(((IkReal(2000000.00000000))*(x367)*(x370)))+(((IkReal(-1000000.00000000))*(x365)*(x366)))+(((IkReal(-1000000.00000000))*(x363)*(x364))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(1500.00000000000))*(x370)))+(((IkReal(1500.00000000000))*(x367)))+(((x368)*(x371)))+(((IkReal(-1.00000000000000))*(x368)*(x369))))) != 0)?((IkReal)1/(((((IkReal(1500.00000000000))*(x370)))+(((IkReal(1500.00000000000))*(x367)))+(((x368)*(x371)))+(((IkReal(-1.00000000000000))*(x368)*(x369)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x363)*(x373)))+(((x365)*(x374)))+(((x366)*(x373)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x364)*(x374)))))))+IKsqr(((((IKabs(((((IkReal(3000.00000000000))*(x367)))+(((IkReal(-1.00000000000000))*(x369)*(x372)))+(((IkReal(3000.00000000000))*(x370)))+(((x371)*(x372))))) != 0)?((IkReal)1/(((((IkReal(3000.00000000000))*(x367)))+(((IkReal(-1.00000000000000))*(x369)*(x372)))+(((IkReal(3000.00000000000))*(x370)))+(((x371)*(x372)))))):(IkReal)1.0e30))*(((IkReal(9.00000000000000))+(((IkReal(2000000.00000000))*(x367)*(x370)))+(((IkReal(-1000000.00000000))*(x365)*(x366)))+(((IkReal(-1000000.00000000))*(x363)*(x364)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(1500.00000000000))*(x370)))+(((IkReal(1500.00000000000))*(x367)))+(((x368)*(x371)))+(((IkReal(-1.00000000000000))*(x368)*(x369))))) != 0)?((IkReal)1/(((((IkReal(1500.00000000000))*(x370)))+(((IkReal(1500.00000000000))*(x367)))+(((x368)*(x371)))+(((IkReal(-1.00000000000000))*(x368)*(x369)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x363)*(x373)))+(((x365)*(x374)))+(((x366)*(x373)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x364)*(x374)))))), ((((IKabs(((((IkReal(3000.00000000000))*(x367)))+(((IkReal(-1.00000000000000))*(x369)*(x372)))+(((IkReal(3000.00000000000))*(x370)))+(((x371)*(x372))))) != 0)?((IkReal)1/(((((IkReal(3000.00000000000))*(x367)))+(((IkReal(-1.00000000000000))*(x369)*(x372)))+(((IkReal(3000.00000000000))*(x370)))+(((x371)*(x372)))))):(IkReal)1.0e30))*(((IkReal(9.00000000000000))+(((IkReal(2000000.00000000))*(x367)*(x370)))+(((IkReal(-1000000.00000000))*(x365)*(x366)))+(((IkReal(-1000000.00000000))*(x363)*(x364)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x375=IKcos(j4);
IkReal x376=IKsin(j4);
IkReal x377=((IkReal(0.402000000000000))*(sj3));
IkReal x378=((npx)*(sj6));
IkReal x379=((npy)*(sj6));
IkReal x380=((cj6)*(npy));
IkReal x381=((IkReal(1.00000000000000))*(cj6)*(npx));
IkReal x382=((IkReal(1.00000000000000))*(x376));
evalcond[0]=((x380)+(x378)+(((IkReal(-0.00300000000000000))*(x375)))+(((IkReal(-1.00000000000000))*(x376)*(x377))));
evalcond[1]=((((x375)*(x377)))+(x379)+(((IkReal(-0.00300000000000000))*(x376)))+(((IkReal(-1.00000000000000))*(x381))));
evalcond[2]=((IkReal(-0.00300000000000000))+(((x375)*(x378)))+(((IkReal(-1.00000000000000))*(x376)*(x381)))+(((x376)*(x379)))+(((x375)*(x380))));
evalcond[3]=((((x375)*(x379)))+(((IkReal(-1.00000000000000))*(x380)*(x382)))+(((IkReal(-1.00000000000000))*(x375)*(x381)))+(x377)+(((IkReal(-1.00000000000000))*(x378)*(x382))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x383=(npx)*(npx);
IkReal x384=(cj6)*(cj6);
IkReal x385=(npy)*(npy);
IkReal x386=(sj6)*(sj6);
IkReal x387=((cj6)*(npy));
IkReal x388=((IkReal(201000.000000000))*(sj3));
IkReal x389=((npx)*(sj6));
IkReal x390=((npy)*(sj6));
IkReal x391=((cj6)*(npx));
IkReal x392=((IkReal(402000.000000000))*(sj3));
IkReal x393=((IkReal(500000.000000000))*(npx)*(npy));
IkReal x394=((IkReal(500000.000000000))*(cj6)*(sj6));
if( IKabs(((((IKabs(((((IkReal(-3000.00000000000))*(x390)))+(((x387)*(x392)))+(((x389)*(x392)))+(((IkReal(3000.00000000000))*(x391))))) != 0)?((IkReal)1/(((((IkReal(-3000.00000000000))*(x390)))+(((x387)*(x392)))+(((x389)*(x392)))+(((IkReal(3000.00000000000))*(x391)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(1000000.00000000))*(x384)*(x385)))+(((IkReal(1000000.00000000))*(x383)*(x386)))+(((IkReal(2000000.00000000))*(x387)*(x389))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((x387)*(x388)))+(((x388)*(x389)))+(((IkReal(1500.00000000000))*(x391)))+(((IkReal(-1500.00000000000))*(x390))))) != 0)?((IkReal)1/(((((x387)*(x388)))+(((x388)*(x389)))+(((IkReal(1500.00000000000))*(x391)))+(((IkReal(-1500.00000000000))*(x390)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x386)*(x393)))+(((IkReal(-1.00000000000000))*(x385)*(x394)))+(((IkReal(603.000000000000))*(sj3)))+(((x384)*(x393)))+(((x383)*(x394))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-3000.00000000000))*(x390)))+(((x387)*(x392)))+(((x389)*(x392)))+(((IkReal(3000.00000000000))*(x391))))) != 0)?((IkReal)1/(((((IkReal(-3000.00000000000))*(x390)))+(((x387)*(x392)))+(((x389)*(x392)))+(((IkReal(3000.00000000000))*(x391)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(1000000.00000000))*(x384)*(x385)))+(((IkReal(1000000.00000000))*(x383)*(x386)))+(((IkReal(2000000.00000000))*(x387)*(x389)))))))+IKsqr(((((IKabs(((((x387)*(x388)))+(((x388)*(x389)))+(((IkReal(1500.00000000000))*(x391)))+(((IkReal(-1500.00000000000))*(x390))))) != 0)?((IkReal)1/(((((x387)*(x388)))+(((x388)*(x389)))+(((IkReal(1500.00000000000))*(x391)))+(((IkReal(-1500.00000000000))*(x390)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x386)*(x393)))+(((IkReal(-1.00000000000000))*(x385)*(x394)))+(((IkReal(603.000000000000))*(sj3)))+(((x384)*(x393)))+(((x383)*(x394)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-3000.00000000000))*(x390)))+(((x387)*(x392)))+(((x389)*(x392)))+(((IkReal(3000.00000000000))*(x391))))) != 0)?((IkReal)1/(((((IkReal(-3000.00000000000))*(x390)))+(((x387)*(x392)))+(((x389)*(x392)))+(((IkReal(3000.00000000000))*(x391)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(1000000.00000000))*(x384)*(x385)))+(((IkReal(1000000.00000000))*(x383)*(x386)))+(((IkReal(2000000.00000000))*(x387)*(x389)))))), ((((IKabs(((((x387)*(x388)))+(((x388)*(x389)))+(((IkReal(1500.00000000000))*(x391)))+(((IkReal(-1500.00000000000))*(x390))))) != 0)?((IkReal)1/(((((x387)*(x388)))+(((x388)*(x389)))+(((IkReal(1500.00000000000))*(x391)))+(((IkReal(-1500.00000000000))*(x390)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x386)*(x393)))+(((IkReal(-1.00000000000000))*(x385)*(x394)))+(((IkReal(603.000000000000))*(sj3)))+(((x384)*(x393)))+(((x383)*(x394)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x395=IKcos(j4);
IkReal x396=IKsin(j4);
IkReal x397=((IkReal(0.402000000000000))*(sj3));
IkReal x398=((npx)*(sj6));
IkReal x399=((npy)*(sj6));
IkReal x400=((cj6)*(npy));
IkReal x401=((IkReal(1.00000000000000))*(cj6)*(npx));
IkReal x402=((IkReal(1.00000000000000))*(x396));
evalcond[0]=((x398)+(x400)+(((IkReal(-1.00000000000000))*(x396)*(x397)))+(((IkReal(-0.00300000000000000))*(x395))));
evalcond[1]=((((x395)*(x397)))+(x399)+(((IkReal(-0.00300000000000000))*(x396)))+(((IkReal(-1.00000000000000))*(x401))));
evalcond[2]=((IkReal(-0.00300000000000000))+(((x395)*(x398)))+(((x396)*(x399)))+(((x395)*(x400)))+(((IkReal(-1.00000000000000))*(x396)*(x401))));
evalcond[3]=((((x395)*(x399)))+(((IkReal(-1.00000000000000))*(x395)*(x401)))+(x397)+(((IkReal(-1.00000000000000))*(x400)*(x402)))+(((IkReal(-1.00000000000000))*(x398)*(x402))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x403=((IkReal(1000.00000000000))*(npx));
IkReal x404=((IkReal(1000.00000000000))*(npy));
IkReal x405=((IkReal(134000.000000000))*(sj3)*(sj6));
IkReal x406=((IkReal(134000.000000000))*(cj6)*(sj3));
if( IKabs(((gconst102)*(((((IkReal(-1.00000000000000))*(cj6)*(x403)))+(((sj6)*(x404)))+(((npy)*(x406)))+(((npx)*(x405))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst102)*(((((sj6)*(x403)))+(((IkReal(-1.00000000000000))*(npy)*(x405)))+(((npx)*(x406)))+(((cj6)*(x404))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst102)*(((((IkReal(-1.00000000000000))*(cj6)*(x403)))+(((sj6)*(x404)))+(((npy)*(x406)))+(((npx)*(x405)))))), ((gconst102)*(((((sj6)*(x403)))+(((IkReal(-1.00000000000000))*(npy)*(x405)))+(((npx)*(x406)))+(((cj6)*(x404)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x407=IKcos(j4);
IkReal x408=IKsin(j4);
IkReal x409=((IkReal(0.402000000000000))*(sj3));
IkReal x410=((npx)*(sj6));
IkReal x411=((npy)*(sj6));
IkReal x412=((cj6)*(npy));
IkReal x413=((IkReal(1.00000000000000))*(cj6)*(npx));
IkReal x414=((IkReal(1.00000000000000))*(x408));
evalcond[0]=((((IkReal(-0.00300000000000000))*(x407)))+(x412)+(x410)+(((IkReal(-1.00000000000000))*(x408)*(x409))));
evalcond[1]=((((x407)*(x409)))+(((IkReal(-0.00300000000000000))*(x408)))+(x411)+(((IkReal(-1.00000000000000))*(x413))));
evalcond[2]=((IkReal(-0.00300000000000000))+(((x407)*(x410)))+(((x407)*(x412)))+(((x408)*(x411)))+(((IkReal(-1.00000000000000))*(x408)*(x413))));
evalcond[3]=((((x407)*(x411)))+(((IkReal(-1.00000000000000))*(x412)*(x414)))+(x409)+(((IkReal(-1.00000000000000))*(x407)*(x413)))+(((IkReal(-1.00000000000000))*(x410)*(x414))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x415=(sj5)*(sj5);
IkReal x416=((IkReal(0.617796000000000))*(x415));
if( IKabs(((IkReal(0.786000000000000))*(npx)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.786000000000000))*(npy)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x417=((IkReal(1.00000000000000))*(IKatan2(((IkReal(0.786000000000000))*(npx)*(sj5)), ((IkReal(-0.786000000000000))*(npy)*(sj5)))));
if( (((((x416)*((npx)*(npx))))+(((x416)*((npy)*(npy)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((x416)*((npx)*(npx))))+(((x416)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x416)*((npx)*(npx))))+(((x416)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(0.00716400000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.786000000000000))*(cj5)*(npz))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((x416)*((npx)*(npx))))+(((x416)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x416)*((npx)*(npx))))+(((x416)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(0.00716400000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.786000000000000))*(cj5)*(npz))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x418=IKasin(((((IKabs(IKabs(IKsqrt(((((x416)*((npx)*(npx))))+(((x416)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x416)*((npx)*(npx))))+(((x416)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(0.00716400000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.786000000000000))*(cj5)*(npz)))))));
j6array[0]=((((IkReal(-1.00000000000000))*(x417)))+(((IkReal(-1.00000000000000))*(x418))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(x418)+(((IkReal(-1.00000000000000))*(x417))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
evalcond[0]=((IkReal(0.393000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((npy)*(sj5)*(IKsin(j6))))+(((IkReal(0.402000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(npx)*(sj5)*(IKcos(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((IkReal(3.00000000000000))+(((IkReal(53868.0000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(17956.0000000000))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x419=((IkReal(134.000000000000))*(sj3));
dummyeval[0]=((((npz)*(sj5)))+(((cj6)*(npy)*(x419)))+(((cj5)*(npy)*(sj6)))+(((npx)*(sj6)*(x419)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x420=((IkReal(134.000000000000))*(cj5)*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(npy)*(sj6)*(x420)))+(((cj6)*(npy)))+(((npx)*(sj6)))+(((IkReal(-134.000000000000))*(npz)*(sj3)*(sj5)))+(((cj6)*(npx)*(x420))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x421=(cj6)*(cj6);
IkReal x422=(npy)*(npy);
IkReal x423=(npx)*(npx);
IkReal x424=(sj6)*(sj6);
IkReal x425=((npx)*(sj6));
IkReal x426=((npz)*(sj5));
IkReal x427=((cj5)*(sj3));
IkReal x428=((npy)*(sj6));
IkReal x429=((cj6)*(npy));
IkReal x430=((cj6)*(npx));
IkReal x431=((IkReal(500000.000000000))*(cj5));
IkReal x432=((npx)*(npy));
IkReal x433=((cj6)*(sj6));
IkReal x434=((IkReal(500000.000000000))*(x429));
if( IKabs(((((IKabs(((((IkReal(-201000.000000000))*(sj3)*(x426)))+(((IkReal(201000.000000000))*(x427)*(x430)))+(((IkReal(1500.00000000000))*(x425)))+(((IkReal(1500.00000000000))*(x429)))+(((IkReal(-201000.000000000))*(x427)*(x428))))) != 0)?((IkReal)1/(((((IkReal(-201000.000000000))*(sj3)*(x426)))+(((IkReal(201000.000000000))*(x427)*(x430)))+(((IkReal(1500.00000000000))*(x425)))+(((IkReal(1500.00000000000))*(x429)))+(((IkReal(-201000.000000000))*(x427)*(x428)))))):(IkReal)1.0e30))*(((((x421)*(x431)*(x432)))+(((IkReal(-1.00000000000000))*(x422)*(x431)*(x433)))+(((x423)*(x431)*(x433)))+(((IkReal(-1.00000000000000))*(x424)*(x431)*(x432)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-500000.000000000))*(x425)*(x426)))+(((IkReal(-1.00000000000000))*(x426)*(x434))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-750.000000000000))*(x429)))+(((IkReal(-750.000000000000))*(x425)))+(((IkReal(-100500.000000000))*(x427)*(x430)))+(((IkReal(100500.000000000))*(sj3)*(x426)))+(((IkReal(100500.000000000))*(x427)*(x428))))) != 0)?((IkReal)1/(((((IkReal(-750.000000000000))*(x429)))+(((IkReal(-750.000000000000))*(x425)))+(((IkReal(-100500.000000000))*(x427)*(x430)))+(((IkReal(100500.000000000))*(sj3)*(x426)))+(((IkReal(100500.000000000))*(x427)*(x428)))))):(IkReal)1.0e30))*(((((IkReal(-250000.000000000))*(x423)*(x424)))+(((IkReal(40401.0000000000))*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*(x425)*(x434)))+(((IkReal(-250000.000000000))*(x421)*(x422))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-201000.000000000))*(sj3)*(x426)))+(((IkReal(201000.000000000))*(x427)*(x430)))+(((IkReal(1500.00000000000))*(x425)))+(((IkReal(1500.00000000000))*(x429)))+(((IkReal(-201000.000000000))*(x427)*(x428))))) != 0)?((IkReal)1/(((((IkReal(-201000.000000000))*(sj3)*(x426)))+(((IkReal(201000.000000000))*(x427)*(x430)))+(((IkReal(1500.00000000000))*(x425)))+(((IkReal(1500.00000000000))*(x429)))+(((IkReal(-201000.000000000))*(x427)*(x428)))))):(IkReal)1.0e30))*(((((x421)*(x431)*(x432)))+(((IkReal(-1.00000000000000))*(x422)*(x431)*(x433)))+(((x423)*(x431)*(x433)))+(((IkReal(-1.00000000000000))*(x424)*(x431)*(x432)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-500000.000000000))*(x425)*(x426)))+(((IkReal(-1.00000000000000))*(x426)*(x434)))))))+IKsqr(((((IKabs(((((IkReal(-750.000000000000))*(x429)))+(((IkReal(-750.000000000000))*(x425)))+(((IkReal(-100500.000000000))*(x427)*(x430)))+(((IkReal(100500.000000000))*(sj3)*(x426)))+(((IkReal(100500.000000000))*(x427)*(x428))))) != 0)?((IkReal)1/(((((IkReal(-750.000000000000))*(x429)))+(((IkReal(-750.000000000000))*(x425)))+(((IkReal(-100500.000000000))*(x427)*(x430)))+(((IkReal(100500.000000000))*(sj3)*(x426)))+(((IkReal(100500.000000000))*(x427)*(x428)))))):(IkReal)1.0e30))*(((((IkReal(-250000.000000000))*(x423)*(x424)))+(((IkReal(40401.0000000000))*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*(x425)*(x434)))+(((IkReal(-250000.000000000))*(x421)*(x422)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-201000.000000000))*(sj3)*(x426)))+(((IkReal(201000.000000000))*(x427)*(x430)))+(((IkReal(1500.00000000000))*(x425)))+(((IkReal(1500.00000000000))*(x429)))+(((IkReal(-201000.000000000))*(x427)*(x428))))) != 0)?((IkReal)1/(((((IkReal(-201000.000000000))*(sj3)*(x426)))+(((IkReal(201000.000000000))*(x427)*(x430)))+(((IkReal(1500.00000000000))*(x425)))+(((IkReal(1500.00000000000))*(x429)))+(((IkReal(-201000.000000000))*(x427)*(x428)))))):(IkReal)1.0e30))*(((((x421)*(x431)*(x432)))+(((IkReal(-1.00000000000000))*(x422)*(x431)*(x433)))+(((x423)*(x431)*(x433)))+(((IkReal(-1.00000000000000))*(x424)*(x431)*(x432)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-500000.000000000))*(x425)*(x426)))+(((IkReal(-1.00000000000000))*(x426)*(x434)))))), ((((IKabs(((((IkReal(-750.000000000000))*(x429)))+(((IkReal(-750.000000000000))*(x425)))+(((IkReal(-100500.000000000))*(x427)*(x430)))+(((IkReal(100500.000000000))*(sj3)*(x426)))+(((IkReal(100500.000000000))*(x427)*(x428))))) != 0)?((IkReal)1/(((((IkReal(-750.000000000000))*(x429)))+(((IkReal(-750.000000000000))*(x425)))+(((IkReal(-100500.000000000))*(x427)*(x430)))+(((IkReal(100500.000000000))*(sj3)*(x426)))+(((IkReal(100500.000000000))*(x427)*(x428)))))):(IkReal)1.0e30))*(((((IkReal(-250000.000000000))*(x423)*(x424)))+(((IkReal(40401.0000000000))*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*(x425)*(x434)))+(((IkReal(-250000.000000000))*(x421)*(x422)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x435=IKcos(j4);
IkReal x436=IKsin(j4);
IkReal x437=((IkReal(0.402000000000000))*(sj3));
IkReal x438=((cj6)*(npy));
IkReal x439=((npx)*(sj6));
IkReal x440=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x441=((cj5)*(cj6)*(npx));
IkReal x442=((IkReal(1.00000000000000))*(x436));
IkReal x443=((cj5)*(npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x436)*(x437)))+(x438)+(x439)+(((IkReal(-0.00300000000000000))*(x435))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x440)))+(((IkReal(-1.00000000000000))*(x443)))+(x441)+(((IkReal(-0.00300000000000000))*(x436)))+(((x435)*(x437))));
evalcond[2]=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(x436)*(x440)))+(((x436)*(x441)))+(((x435)*(x438)))+(((x435)*(x439)))+(((IkReal(-1.00000000000000))*(x442)*(x443))));
evalcond[3]=((((x435)*(x441)))+(((IkReal(-1.00000000000000))*(x438)*(x442)))+(((IkReal(-1.00000000000000))*(x435)*(x440)))+(((IkReal(-1.00000000000000))*(x435)*(x443)))+(((IkReal(-1.00000000000000))*(x439)*(x442)))+(x437));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x444=(npy)*(npy);
IkReal x445=(sj6)*(sj6);
IkReal x446=(cj6)*(cj6);
IkReal x447=(npx)*(npx);
IkReal x448=((cj6)*(npy));
IkReal x449=((npz)*(sj5));
IkReal x450=((npx)*(sj6));
IkReal x451=((IkReal(1500.00000000000))*(cj5));
IkReal x452=((cj6)*(npx));
IkReal x453=((npy)*(sj6));
IkReal x454=((IkReal(500000.000000000))*(cj5));
IkReal x455=((cj6)*(sj6));
IkReal x456=((IkReal(3000.00000000000))*(cj5));
IkReal x457=((npx)*(npy));
IkReal x458=((sj3)*(x450));
if( IKabs(((((IKabs(((((x453)*(x456)))+(((IkReal(402000.000000000))*(x458)))+(((IkReal(402000.000000000))*(sj3)*(x448)))+(((IkReal(-1.00000000000000))*(x452)*(x456)))+(((IkReal(3000.00000000000))*(x449))))) != 0)?((IkReal)1/(((((x453)*(x456)))+(((IkReal(402000.000000000))*(x458)))+(((IkReal(402000.000000000))*(sj3)*(x448)))+(((IkReal(-1.00000000000000))*(x452)*(x456)))+(((IkReal(3000.00000000000))*(x449)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(2000000.00000000))*(x448)*(x450)))+(((IkReal(1000000.00000000))*(x445)*(x447)))+(((IkReal(1000000.00000000))*(x444)*(x446))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(201000.000000000))*(sj3)*(x448)))+(((IkReal(201000.000000000))*(x458)))+(((IkReal(-1.00000000000000))*(x451)*(x452)))+(((x451)*(x453)))+(((IkReal(1500.00000000000))*(x449))))) != 0)?((IkReal)1/(((((IkReal(201000.000000000))*(sj3)*(x448)))+(((IkReal(201000.000000000))*(x458)))+(((IkReal(-1.00000000000000))*(x451)*(x452)))+(((x451)*(x453)))+(((IkReal(1500.00000000000))*(x449)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x446)*(x454)*(x457)))+(((x444)*(x454)*(x455)))+(((IkReal(500000.000000000))*(x448)*(x449)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(500000.000000000))*(x449)*(x450)))+(((x445)*(x454)*(x457)))+(((IkReal(-1.00000000000000))*(x447)*(x454)*(x455))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((x453)*(x456)))+(((IkReal(402000.000000000))*(x458)))+(((IkReal(402000.000000000))*(sj3)*(x448)))+(((IkReal(-1.00000000000000))*(x452)*(x456)))+(((IkReal(3000.00000000000))*(x449))))) != 0)?((IkReal)1/(((((x453)*(x456)))+(((IkReal(402000.000000000))*(x458)))+(((IkReal(402000.000000000))*(sj3)*(x448)))+(((IkReal(-1.00000000000000))*(x452)*(x456)))+(((IkReal(3000.00000000000))*(x449)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(2000000.00000000))*(x448)*(x450)))+(((IkReal(1000000.00000000))*(x445)*(x447)))+(((IkReal(1000000.00000000))*(x444)*(x446)))))))+IKsqr(((((IKabs(((((IkReal(201000.000000000))*(sj3)*(x448)))+(((IkReal(201000.000000000))*(x458)))+(((IkReal(-1.00000000000000))*(x451)*(x452)))+(((x451)*(x453)))+(((IkReal(1500.00000000000))*(x449))))) != 0)?((IkReal)1/(((((IkReal(201000.000000000))*(sj3)*(x448)))+(((IkReal(201000.000000000))*(x458)))+(((IkReal(-1.00000000000000))*(x451)*(x452)))+(((x451)*(x453)))+(((IkReal(1500.00000000000))*(x449)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x446)*(x454)*(x457)))+(((x444)*(x454)*(x455)))+(((IkReal(500000.000000000))*(x448)*(x449)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(500000.000000000))*(x449)*(x450)))+(((x445)*(x454)*(x457)))+(((IkReal(-1.00000000000000))*(x447)*(x454)*(x455)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((x453)*(x456)))+(((IkReal(402000.000000000))*(x458)))+(((IkReal(402000.000000000))*(sj3)*(x448)))+(((IkReal(-1.00000000000000))*(x452)*(x456)))+(((IkReal(3000.00000000000))*(x449))))) != 0)?((IkReal)1/(((((x453)*(x456)))+(((IkReal(402000.000000000))*(x458)))+(((IkReal(402000.000000000))*(sj3)*(x448)))+(((IkReal(-1.00000000000000))*(x452)*(x456)))+(((IkReal(3000.00000000000))*(x449)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(2000000.00000000))*(x448)*(x450)))+(((IkReal(1000000.00000000))*(x445)*(x447)))+(((IkReal(1000000.00000000))*(x444)*(x446)))))), ((((IKabs(((((IkReal(201000.000000000))*(sj3)*(x448)))+(((IkReal(201000.000000000))*(x458)))+(((IkReal(-1.00000000000000))*(x451)*(x452)))+(((x451)*(x453)))+(((IkReal(1500.00000000000))*(x449))))) != 0)?((IkReal)1/(((((IkReal(201000.000000000))*(sj3)*(x448)))+(((IkReal(201000.000000000))*(x458)))+(((IkReal(-1.00000000000000))*(x451)*(x452)))+(((x451)*(x453)))+(((IkReal(1500.00000000000))*(x449)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x446)*(x454)*(x457)))+(((x444)*(x454)*(x455)))+(((IkReal(500000.000000000))*(x448)*(x449)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(500000.000000000))*(x449)*(x450)))+(((x445)*(x454)*(x457)))+(((IkReal(-1.00000000000000))*(x447)*(x454)*(x455)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x459=IKcos(j4);
IkReal x460=IKsin(j4);
IkReal x461=((IkReal(0.402000000000000))*(sj3));
IkReal x462=((cj6)*(npy));
IkReal x463=((npx)*(sj6));
IkReal x464=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x465=((cj5)*(cj6)*(npx));
IkReal x466=((IkReal(1.00000000000000))*(x460));
IkReal x467=((cj5)*(npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x460)*(x461)))+(((IkReal(-0.00300000000000000))*(x459)))+(x463)+(x462));
evalcond[1]=((((IkReal(-1.00000000000000))*(x467)))+(((IkReal(-0.00300000000000000))*(x460)))+(((IkReal(-1.00000000000000))*(x464)))+(x465)+(((x459)*(x461))));
evalcond[2]=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(x466)*(x467)))+(((IkReal(-1.00000000000000))*(x460)*(x464)))+(((x460)*(x465)))+(((x459)*(x462)))+(((x459)*(x463))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x459)*(x467)))+(((IkReal(-1.00000000000000))*(x462)*(x466)))+(((IkReal(-1.00000000000000))*(x463)*(x466)))+(((IkReal(-1.00000000000000))*(x459)*(x464)))+(x461)+(((x459)*(x465))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x468=((IkReal(134000.000000000))*(sj3));
IkReal x469=((npz)*(sj5));
IkReal x470=((npx)*(sj6));
IkReal x471=((cj6)*(npy));
IkReal x472=((cj5)*(cj6)*(npx));
IkReal x473=((cj5)*(npy)*(sj6));
if( IKabs(((gconst0)*(((((IkReal(-1000.00000000000))*(x469)))+(((IkReal(1000.00000000000))*(x472)))+(((IkReal(-1000.00000000000))*(x473)))+(((x468)*(x471)))+(((x468)*(x470))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((x468)*(x469)))+(((IkReal(-1.00000000000000))*(x468)*(x472)))+(((IkReal(1000.00000000000))*(x471)))+(((IkReal(1000.00000000000))*(x470)))+(((x468)*(x473))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst0)*(((((IkReal(-1000.00000000000))*(x469)))+(((IkReal(1000.00000000000))*(x472)))+(((IkReal(-1000.00000000000))*(x473)))+(((x468)*(x471)))+(((x468)*(x470)))))), ((gconst0)*(((((x468)*(x469)))+(((IkReal(-1.00000000000000))*(x468)*(x472)))+(((IkReal(1000.00000000000))*(x471)))+(((IkReal(1000.00000000000))*(x470)))+(((x468)*(x473)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x474=IKcos(j4);
IkReal x475=IKsin(j4);
IkReal x476=((IkReal(0.402000000000000))*(sj3));
IkReal x477=((cj6)*(npy));
IkReal x478=((npx)*(sj6));
IkReal x479=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x480=((cj5)*(cj6)*(npx));
IkReal x481=((IkReal(1.00000000000000))*(x475));
IkReal x482=((cj5)*(npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x475)*(x476)))+(x477)+(x478)+(((IkReal(-0.00300000000000000))*(x474))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x479)))+(((IkReal(-1.00000000000000))*(x482)))+(x480)+(((IkReal(-0.00300000000000000))*(x475)))+(((x474)*(x476))));
evalcond[2]=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(x475)*(x479)))+(((x475)*(x480)))+(((IkReal(-1.00000000000000))*(x481)*(x482)))+(((x474)*(x478)))+(((x474)*(x477))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x474)*(x482)))+(((x474)*(x480)))+(x476)+(((IkReal(-1.00000000000000))*(x477)*(x481)))+(((IkReal(-1.00000000000000))*(x474)*(x479)))+(((IkReal(-1.00000000000000))*(x478)*(x481))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x483=(sj5)*(sj5);
if( IKabs(((IkReal(-1.00000000000000))*(npx)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((npy)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x484=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(npx)*(sj5)), ((npy)*(sj5)))));
if( (((((x483)*((npx)*(npx))))+(((x483)*((npy)*(npy)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((x483)*((npx)*(npx))))+(((x483)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x483)*((npx)*(npx))))+(((x483)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(0.393000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(0.402000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((x483)*((npx)*(npx))))+(((x483)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x483)*((npx)*(npx))))+(((x483)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(0.393000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(0.402000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x485=IKasin(((((IKabs(IKabs(IKsqrt(((((x483)*((npx)*(npx))))+(((x483)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x483)*((npx)*(npx))))+(((x483)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(0.393000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(0.402000000000000))*(cj3)))))));
j6array[0]=((((IkReal(-1.00000000000000))*(x484)))+(((IkReal(-1.00000000000000))*(x485))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x484)))+(x485));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x486=((IkReal(0.786000000000000))*(sj5));
evalcond[0]=((IkReal(0.00716400000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.786000000000000))*(cj5)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(x486)*(IKsin(j6))))+(((npx)*(x486)*(IKcos(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((IkReal(3.00000000000000))+(((IkReal(53868.0000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(17956.0000000000))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x487=((IkReal(134.000000000000))*(sj3));
dummyeval[0]=((((cj6)*(npy)*(x487)))+(((npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((npx)*(sj6)*(x487)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x488=((IkReal(134.000000000000))*(cj5)*(sj3));
dummyeval[0]=((((cj6)*(npy)))+(((npx)*(sj6)))+(((IkReal(-134.000000000000))*(npz)*(sj3)*(sj5)))+(((cj6)*(npx)*(x488)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x488))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x489=(cj6)*(cj6);
IkReal x490=(npy)*(npy);
IkReal x491=(npx)*(npx);
IkReal x492=(sj6)*(sj6);
IkReal x493=((npx)*(sj6));
IkReal x494=((npz)*(sj5));
IkReal x495=((cj5)*(sj3));
IkReal x496=((npy)*(sj6));
IkReal x497=((cj6)*(npy));
IkReal x498=((cj6)*(npx));
IkReal x499=((IkReal(500000.000000000))*(cj5));
IkReal x500=((npx)*(npy));
IkReal x501=((cj6)*(sj6));
IkReal x502=((IkReal(500000.000000000))*(x497));
if( IKabs(((((IKabs(((((IkReal(-201000.000000000))*(sj3)*(x494)))+(((IkReal(1500.00000000000))*(x497)))+(((IkReal(1500.00000000000))*(x493)))+(((IkReal(201000.000000000))*(x495)*(x498)))+(((IkReal(-201000.000000000))*(x495)*(x496))))) != 0)?((IkReal)1/(((((IkReal(-201000.000000000))*(sj3)*(x494)))+(((IkReal(1500.00000000000))*(x497)))+(((IkReal(1500.00000000000))*(x493)))+(((IkReal(201000.000000000))*(x495)*(x498)))+(((IkReal(-201000.000000000))*(x495)*(x496)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x492)*(x499)*(x500)))+(((x491)*(x499)*(x501)))+(((x489)*(x499)*(x500)))+(((IkReal(-1.00000000000000))*(x494)*(x502)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-500000.000000000))*(x493)*(x494)))+(((IkReal(-1.00000000000000))*(x490)*(x499)*(x501))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-750.000000000000))*(x493)))+(((IkReal(-750.000000000000))*(x497)))+(((IkReal(-100500.000000000))*(x495)*(x498)))+(((IkReal(100500.000000000))*(x495)*(x496)))+(((IkReal(100500.000000000))*(sj3)*(x494))))) != 0)?((IkReal)1/(((((IkReal(-750.000000000000))*(x493)))+(((IkReal(-750.000000000000))*(x497)))+(((IkReal(-100500.000000000))*(x495)*(x498)))+(((IkReal(100500.000000000))*(x495)*(x496)))+(((IkReal(100500.000000000))*(sj3)*(x494)))))):(IkReal)1.0e30))*(((((IkReal(40401.0000000000))*((sj3)*(sj3))))+(((IkReal(-250000.000000000))*(x491)*(x492)))+(((IkReal(-1.00000000000000))*(x493)*(x502)))+(((IkReal(-250000.000000000))*(x489)*(x490))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-201000.000000000))*(sj3)*(x494)))+(((IkReal(1500.00000000000))*(x497)))+(((IkReal(1500.00000000000))*(x493)))+(((IkReal(201000.000000000))*(x495)*(x498)))+(((IkReal(-201000.000000000))*(x495)*(x496))))) != 0)?((IkReal)1/(((((IkReal(-201000.000000000))*(sj3)*(x494)))+(((IkReal(1500.00000000000))*(x497)))+(((IkReal(1500.00000000000))*(x493)))+(((IkReal(201000.000000000))*(x495)*(x498)))+(((IkReal(-201000.000000000))*(x495)*(x496)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x492)*(x499)*(x500)))+(((x491)*(x499)*(x501)))+(((x489)*(x499)*(x500)))+(((IkReal(-1.00000000000000))*(x494)*(x502)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-500000.000000000))*(x493)*(x494)))+(((IkReal(-1.00000000000000))*(x490)*(x499)*(x501)))))))+IKsqr(((((IKabs(((((IkReal(-750.000000000000))*(x493)))+(((IkReal(-750.000000000000))*(x497)))+(((IkReal(-100500.000000000))*(x495)*(x498)))+(((IkReal(100500.000000000))*(x495)*(x496)))+(((IkReal(100500.000000000))*(sj3)*(x494))))) != 0)?((IkReal)1/(((((IkReal(-750.000000000000))*(x493)))+(((IkReal(-750.000000000000))*(x497)))+(((IkReal(-100500.000000000))*(x495)*(x498)))+(((IkReal(100500.000000000))*(x495)*(x496)))+(((IkReal(100500.000000000))*(sj3)*(x494)))))):(IkReal)1.0e30))*(((((IkReal(40401.0000000000))*((sj3)*(sj3))))+(((IkReal(-250000.000000000))*(x491)*(x492)))+(((IkReal(-1.00000000000000))*(x493)*(x502)))+(((IkReal(-250000.000000000))*(x489)*(x490)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(-201000.000000000))*(sj3)*(x494)))+(((IkReal(1500.00000000000))*(x497)))+(((IkReal(1500.00000000000))*(x493)))+(((IkReal(201000.000000000))*(x495)*(x498)))+(((IkReal(-201000.000000000))*(x495)*(x496))))) != 0)?((IkReal)1/(((((IkReal(-201000.000000000))*(sj3)*(x494)))+(((IkReal(1500.00000000000))*(x497)))+(((IkReal(1500.00000000000))*(x493)))+(((IkReal(201000.000000000))*(x495)*(x498)))+(((IkReal(-201000.000000000))*(x495)*(x496)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x492)*(x499)*(x500)))+(((x491)*(x499)*(x501)))+(((x489)*(x499)*(x500)))+(((IkReal(-1.00000000000000))*(x494)*(x502)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-500000.000000000))*(x493)*(x494)))+(((IkReal(-1.00000000000000))*(x490)*(x499)*(x501)))))), ((((IKabs(((((IkReal(-750.000000000000))*(x493)))+(((IkReal(-750.000000000000))*(x497)))+(((IkReal(-100500.000000000))*(x495)*(x498)))+(((IkReal(100500.000000000))*(x495)*(x496)))+(((IkReal(100500.000000000))*(sj3)*(x494))))) != 0)?((IkReal)1/(((((IkReal(-750.000000000000))*(x493)))+(((IkReal(-750.000000000000))*(x497)))+(((IkReal(-100500.000000000))*(x495)*(x498)))+(((IkReal(100500.000000000))*(x495)*(x496)))+(((IkReal(100500.000000000))*(sj3)*(x494)))))):(IkReal)1.0e30))*(((((IkReal(40401.0000000000))*((sj3)*(sj3))))+(((IkReal(-250000.000000000))*(x491)*(x492)))+(((IkReal(-1.00000000000000))*(x493)*(x502)))+(((IkReal(-250000.000000000))*(x489)*(x490)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x503=IKcos(j4);
IkReal x504=IKsin(j4);
IkReal x505=((IkReal(0.402000000000000))*(sj3));
IkReal x506=((cj6)*(npy));
IkReal x507=((npx)*(sj6));
IkReal x508=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x509=((cj5)*(cj6)*(npx));
IkReal x510=((IkReal(1.00000000000000))*(x504));
IkReal x511=((cj5)*(npy)*(sj6));
evalcond[0]=((x506)+(x507)+(((IkReal(-1.00000000000000))*(x504)*(x505)))+(((IkReal(-0.00300000000000000))*(x503))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x508)))+(((IkReal(-1.00000000000000))*(x511)))+(x509)+(((x503)*(x505)))+(((IkReal(-0.00300000000000000))*(x504))));
evalcond[2]=((IkReal(-0.00300000000000000))+(((x503)*(x507)))+(((x503)*(x506)))+(((IkReal(-1.00000000000000))*(x504)*(x508)))+(((x504)*(x509)))+(((IkReal(-1.00000000000000))*(x510)*(x511))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x503)*(x511)))+(((IkReal(-1.00000000000000))*(x503)*(x508)))+(x505)+(((x503)*(x509)))+(((IkReal(-1.00000000000000))*(x506)*(x510)))+(((IkReal(-1.00000000000000))*(x507)*(x510))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x512=(npy)*(npy);
IkReal x513=(sj6)*(sj6);
IkReal x514=(cj6)*(cj6);
IkReal x515=(npx)*(npx);
IkReal x516=((cj6)*(npy));
IkReal x517=((npz)*(sj5));
IkReal x518=((npx)*(sj6));
IkReal x519=((IkReal(1500.00000000000))*(cj5));
IkReal x520=((cj6)*(npx));
IkReal x521=((npy)*(sj6));
IkReal x522=((IkReal(500000.000000000))*(cj5));
IkReal x523=((cj6)*(sj6));
IkReal x524=((IkReal(3000.00000000000))*(cj5));
IkReal x525=((npx)*(npy));
IkReal x526=((sj3)*(x518));
if( IKabs(((((IKabs(((((IkReal(402000.000000000))*(sj3)*(x516)))+(((IkReal(-1.00000000000000))*(x520)*(x524)))+(((IkReal(402000.000000000))*(x526)))+(((IkReal(3000.00000000000))*(x517)))+(((x521)*(x524))))) != 0)?((IkReal)1/(((((IkReal(402000.000000000))*(sj3)*(x516)))+(((IkReal(-1.00000000000000))*(x520)*(x524)))+(((IkReal(402000.000000000))*(x526)))+(((IkReal(3000.00000000000))*(x517)))+(((x521)*(x524)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(1000000.00000000))*(x512)*(x514)))+(((IkReal(1000000.00000000))*(x513)*(x515)))+(((IkReal(2000000.00000000))*(x516)*(x518))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((x519)*(x521)))+(((IkReal(201000.000000000))*(x526)))+(((IkReal(1500.00000000000))*(x517)))+(((IkReal(201000.000000000))*(sj3)*(x516)))+(((IkReal(-1.00000000000000))*(x519)*(x520))))) != 0)?((IkReal)1/(((((x519)*(x521)))+(((IkReal(201000.000000000))*(x526)))+(((IkReal(1500.00000000000))*(x517)))+(((IkReal(201000.000000000))*(sj3)*(x516)))+(((IkReal(-1.00000000000000))*(x519)*(x520)))))):(IkReal)1.0e30))*(((((x512)*(x522)*(x523)))+(((IkReal(500000.000000000))*(x517)*(x518)))+(((x513)*(x522)*(x525)))+(((IkReal(500000.000000000))*(x516)*(x517)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x514)*(x522)*(x525)))+(((IkReal(-1.00000000000000))*(x515)*(x522)*(x523))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(402000.000000000))*(sj3)*(x516)))+(((IkReal(-1.00000000000000))*(x520)*(x524)))+(((IkReal(402000.000000000))*(x526)))+(((IkReal(3000.00000000000))*(x517)))+(((x521)*(x524))))) != 0)?((IkReal)1/(((((IkReal(402000.000000000))*(sj3)*(x516)))+(((IkReal(-1.00000000000000))*(x520)*(x524)))+(((IkReal(402000.000000000))*(x526)))+(((IkReal(3000.00000000000))*(x517)))+(((x521)*(x524)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(1000000.00000000))*(x512)*(x514)))+(((IkReal(1000000.00000000))*(x513)*(x515)))+(((IkReal(2000000.00000000))*(x516)*(x518)))))))+IKsqr(((((IKabs(((((x519)*(x521)))+(((IkReal(201000.000000000))*(x526)))+(((IkReal(1500.00000000000))*(x517)))+(((IkReal(201000.000000000))*(sj3)*(x516)))+(((IkReal(-1.00000000000000))*(x519)*(x520))))) != 0)?((IkReal)1/(((((x519)*(x521)))+(((IkReal(201000.000000000))*(x526)))+(((IkReal(1500.00000000000))*(x517)))+(((IkReal(201000.000000000))*(sj3)*(x516)))+(((IkReal(-1.00000000000000))*(x519)*(x520)))))):(IkReal)1.0e30))*(((((x512)*(x522)*(x523)))+(((IkReal(500000.000000000))*(x517)*(x518)))+(((x513)*(x522)*(x525)))+(((IkReal(500000.000000000))*(x516)*(x517)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x514)*(x522)*(x525)))+(((IkReal(-1.00000000000000))*(x515)*(x522)*(x523)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(402000.000000000))*(sj3)*(x516)))+(((IkReal(-1.00000000000000))*(x520)*(x524)))+(((IkReal(402000.000000000))*(x526)))+(((IkReal(3000.00000000000))*(x517)))+(((x521)*(x524))))) != 0)?((IkReal)1/(((((IkReal(402000.000000000))*(sj3)*(x516)))+(((IkReal(-1.00000000000000))*(x520)*(x524)))+(((IkReal(402000.000000000))*(x526)))+(((IkReal(3000.00000000000))*(x517)))+(((x521)*(x524)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(1000000.00000000))*(x512)*(x514)))+(((IkReal(1000000.00000000))*(x513)*(x515)))+(((IkReal(2000000.00000000))*(x516)*(x518)))))), ((((IKabs(((((x519)*(x521)))+(((IkReal(201000.000000000))*(x526)))+(((IkReal(1500.00000000000))*(x517)))+(((IkReal(201000.000000000))*(sj3)*(x516)))+(((IkReal(-1.00000000000000))*(x519)*(x520))))) != 0)?((IkReal)1/(((((x519)*(x521)))+(((IkReal(201000.000000000))*(x526)))+(((IkReal(1500.00000000000))*(x517)))+(((IkReal(201000.000000000))*(sj3)*(x516)))+(((IkReal(-1.00000000000000))*(x519)*(x520)))))):(IkReal)1.0e30))*(((((x512)*(x522)*(x523)))+(((IkReal(500000.000000000))*(x517)*(x518)))+(((x513)*(x522)*(x525)))+(((IkReal(500000.000000000))*(x516)*(x517)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x514)*(x522)*(x525)))+(((IkReal(-1.00000000000000))*(x515)*(x522)*(x523)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x527=IKcos(j4);
IkReal x528=IKsin(j4);
IkReal x529=((IkReal(0.402000000000000))*(sj3));
IkReal x530=((cj6)*(npy));
IkReal x531=((npx)*(sj6));
IkReal x532=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x533=((cj5)*(cj6)*(npx));
IkReal x534=((IkReal(1.00000000000000))*(x528));
IkReal x535=((cj5)*(npy)*(sj6));
evalcond[0]=((((IkReal(-1.00000000000000))*(x528)*(x529)))+(x531)+(x530)+(((IkReal(-0.00300000000000000))*(x527))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x535)))+(((IkReal(-1.00000000000000))*(x532)))+(x533)+(((IkReal(-0.00300000000000000))*(x528)))+(((x527)*(x529))));
evalcond[2]=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(x534)*(x535)))+(((IkReal(-1.00000000000000))*(x528)*(x532)))+(((x528)*(x533)))+(((x527)*(x531)))+(((x527)*(x530))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x527)*(x532)))+(((IkReal(-1.00000000000000))*(x530)*(x534)))+(((IkReal(-1.00000000000000))*(x531)*(x534)))+(((IkReal(-1.00000000000000))*(x527)*(x535)))+(x529)+(((x527)*(x533))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x536=((IkReal(134000.000000000))*(sj3));
IkReal x537=((npz)*(sj5));
IkReal x538=((npx)*(sj6));
IkReal x539=((cj6)*(npy));
IkReal x540=((cj5)*(cj6)*(npx));
IkReal x541=((cj5)*(npy)*(sj6));
if( IKabs(((gconst0)*(((((IkReal(1000.00000000000))*(x540)))+(((x536)*(x538)))+(((x536)*(x539)))+(((IkReal(-1000.00000000000))*(x537)))+(((IkReal(-1000.00000000000))*(x541))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((x536)*(x541)))+(((x536)*(x537)))+(((IkReal(-1.00000000000000))*(x536)*(x540)))+(((IkReal(1000.00000000000))*(x538)))+(((IkReal(1000.00000000000))*(x539))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst0)*(((((IkReal(1000.00000000000))*(x540)))+(((x536)*(x538)))+(((x536)*(x539)))+(((IkReal(-1000.00000000000))*(x537)))+(((IkReal(-1000.00000000000))*(x541)))))), ((gconst0)*(((((x536)*(x541)))+(((x536)*(x537)))+(((IkReal(-1.00000000000000))*(x536)*(x540)))+(((IkReal(1000.00000000000))*(x538)))+(((IkReal(1000.00000000000))*(x539)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x542=IKcos(j4);
IkReal x543=IKsin(j4);
IkReal x544=((IkReal(0.402000000000000))*(sj3));
IkReal x545=((cj6)*(npy));
IkReal x546=((npx)*(sj6));
IkReal x547=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x548=((cj5)*(cj6)*(npx));
IkReal x549=((IkReal(1.00000000000000))*(x543));
IkReal x550=((cj5)*(npy)*(sj6));
evalcond[0]=((x545)+(x546)+(((IkReal(-0.00300000000000000))*(x542)))+(((IkReal(-1.00000000000000))*(x543)*(x544))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x550)))+(((x542)*(x544)))+(((IkReal(-1.00000000000000))*(x547)))+(x548)+(((IkReal(-0.00300000000000000))*(x543))));
evalcond[2]=((IkReal(-0.00300000000000000))+(((x542)*(x545)))+(((x542)*(x546)))+(((x543)*(x548)))+(((IkReal(-1.00000000000000))*(x549)*(x550)))+(((IkReal(-1.00000000000000))*(x543)*(x547))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x542)*(x550)))+(((IkReal(-1.00000000000000))*(x542)*(x547)))+(((IkReal(-1.00000000000000))*(x545)*(x549)))+(((x542)*(x548)))+(x544)+(((IkReal(-1.00000000000000))*(x546)*(x549))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x551=(sj5)*(sj5);
if( IKabs(((IkReal(-1.00000000000000))*(npx)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((npy)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x552=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(npx)*(sj5)), ((npy)*(sj5)))));
if( (((((x551)*((npy)*(npy))))+(((x551)*((npx)*(npx)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((x551)*((npy)*(npy))))+(((x551)*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x551)*((npy)*(npy))))+(((x551)*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(0.393000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(0.402000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((x551)*((npy)*(npy))))+(((x551)*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x551)*((npy)*(npy))))+(((x551)*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(0.393000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(0.402000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x553=IKasin(((((IKabs(IKabs(IKsqrt(((((x551)*((npy)*(npy))))+(((x551)*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x551)*((npy)*(npy))))+(((x551)*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(0.393000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(0.402000000000000))*(cj3)))))));
j6array[0]=((((IkReal(-1.00000000000000))*(x553)))+(((IkReal(-1.00000000000000))*(x552))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x552)))+(x553));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x554=((IkReal(0.786000000000000))*(sj5));
evalcond[0]=((IkReal(0.00716400000000000))+(((npx)*(x554)*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.786000000000000))*(cj5)*(npz)))+(((IkReal(-1.00000000000000))*(npy)*(x554)*(IKsin(j6)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((IkReal(3.00000000000000))+(((IkReal(53868.0000000000))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(17956.0000000000))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x555=((IkReal(134.000000000000))*(sj3));
dummyeval[0]=((((npx)*(sj6)*(x555)))+(((npz)*(sj5)))+(((cj6)*(npy)*(x555)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x556=((IkReal(134.000000000000))*(cj5)*(sj3));
dummyeval[0]=((((cj6)*(npy)))+(((npx)*(sj6)))+(((IkReal(-134.000000000000))*(npz)*(sj3)*(sj5)))+(((cj6)*(npx)*(x556)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x556))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x557=(cj6)*(cj6);
IkReal x558=(npy)*(npy);
IkReal x559=(npx)*(npx);
IkReal x560=(sj6)*(sj6);
IkReal x561=((npx)*(sj6));
IkReal x562=((npz)*(sj5));
IkReal x563=((cj5)*(sj3));
IkReal x564=((npy)*(sj6));
IkReal x565=((cj6)*(npy));
IkReal x566=((cj6)*(npx));
IkReal x567=((IkReal(500000.000000000))*(cj5));
IkReal x568=((npx)*(npy));
IkReal x569=((cj6)*(sj6));
IkReal x570=((IkReal(500000.000000000))*(x565));
if( IKabs(((((IKabs(((((IkReal(201000.000000000))*(x563)*(x566)))+(((IkReal(1500.00000000000))*(x561)))+(((IkReal(1500.00000000000))*(x565)))+(((IkReal(-201000.000000000))*(sj3)*(x562)))+(((IkReal(-201000.000000000))*(x563)*(x564))))) != 0)?((IkReal)1/(((((IkReal(201000.000000000))*(x563)*(x566)))+(((IkReal(1500.00000000000))*(x561)))+(((IkReal(1500.00000000000))*(x565)))+(((IkReal(-201000.000000000))*(sj3)*(x562)))+(((IkReal(-201000.000000000))*(x563)*(x564)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x558)*(x567)*(x569)))+(((IkReal(-500000.000000000))*(x561)*(x562)))+(((IkReal(603.000000000000))*(sj3)))+(((x559)*(x567)*(x569)))+(((x557)*(x567)*(x568)))+(((IkReal(-1.00000000000000))*(x560)*(x567)*(x568)))+(((IkReal(-1.00000000000000))*(x562)*(x570))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-100500.000000000))*(x563)*(x566)))+(((IkReal(100500.000000000))*(sj3)*(x562)))+(((IkReal(100500.000000000))*(x563)*(x564)))+(((IkReal(-750.000000000000))*(x565)))+(((IkReal(-750.000000000000))*(x561))))) != 0)?((IkReal)1/(((((IkReal(-100500.000000000))*(x563)*(x566)))+(((IkReal(100500.000000000))*(sj3)*(x562)))+(((IkReal(100500.000000000))*(x563)*(x564)))+(((IkReal(-750.000000000000))*(x565)))+(((IkReal(-750.000000000000))*(x561)))))):(IkReal)1.0e30))*(((((IkReal(-250000.000000000))*(x559)*(x560)))+(((IkReal(-250000.000000000))*(x557)*(x558)))+(((IkReal(40401.0000000000))*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*(x561)*(x570))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(201000.000000000))*(x563)*(x566)))+(((IkReal(1500.00000000000))*(x561)))+(((IkReal(1500.00000000000))*(x565)))+(((IkReal(-201000.000000000))*(sj3)*(x562)))+(((IkReal(-201000.000000000))*(x563)*(x564))))) != 0)?((IkReal)1/(((((IkReal(201000.000000000))*(x563)*(x566)))+(((IkReal(1500.00000000000))*(x561)))+(((IkReal(1500.00000000000))*(x565)))+(((IkReal(-201000.000000000))*(sj3)*(x562)))+(((IkReal(-201000.000000000))*(x563)*(x564)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x558)*(x567)*(x569)))+(((IkReal(-500000.000000000))*(x561)*(x562)))+(((IkReal(603.000000000000))*(sj3)))+(((x559)*(x567)*(x569)))+(((x557)*(x567)*(x568)))+(((IkReal(-1.00000000000000))*(x560)*(x567)*(x568)))+(((IkReal(-1.00000000000000))*(x562)*(x570)))))))+IKsqr(((((IKabs(((((IkReal(-100500.000000000))*(x563)*(x566)))+(((IkReal(100500.000000000))*(sj3)*(x562)))+(((IkReal(100500.000000000))*(x563)*(x564)))+(((IkReal(-750.000000000000))*(x565)))+(((IkReal(-750.000000000000))*(x561))))) != 0)?((IkReal)1/(((((IkReal(-100500.000000000))*(x563)*(x566)))+(((IkReal(100500.000000000))*(sj3)*(x562)))+(((IkReal(100500.000000000))*(x563)*(x564)))+(((IkReal(-750.000000000000))*(x565)))+(((IkReal(-750.000000000000))*(x561)))))):(IkReal)1.0e30))*(((((IkReal(-250000.000000000))*(x559)*(x560)))+(((IkReal(-250000.000000000))*(x557)*(x558)))+(((IkReal(40401.0000000000))*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*(x561)*(x570)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(201000.000000000))*(x563)*(x566)))+(((IkReal(1500.00000000000))*(x561)))+(((IkReal(1500.00000000000))*(x565)))+(((IkReal(-201000.000000000))*(sj3)*(x562)))+(((IkReal(-201000.000000000))*(x563)*(x564))))) != 0)?((IkReal)1/(((((IkReal(201000.000000000))*(x563)*(x566)))+(((IkReal(1500.00000000000))*(x561)))+(((IkReal(1500.00000000000))*(x565)))+(((IkReal(-201000.000000000))*(sj3)*(x562)))+(((IkReal(-201000.000000000))*(x563)*(x564)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x558)*(x567)*(x569)))+(((IkReal(-500000.000000000))*(x561)*(x562)))+(((IkReal(603.000000000000))*(sj3)))+(((x559)*(x567)*(x569)))+(((x557)*(x567)*(x568)))+(((IkReal(-1.00000000000000))*(x560)*(x567)*(x568)))+(((IkReal(-1.00000000000000))*(x562)*(x570)))))), ((((IKabs(((((IkReal(-100500.000000000))*(x563)*(x566)))+(((IkReal(100500.000000000))*(sj3)*(x562)))+(((IkReal(100500.000000000))*(x563)*(x564)))+(((IkReal(-750.000000000000))*(x565)))+(((IkReal(-750.000000000000))*(x561))))) != 0)?((IkReal)1/(((((IkReal(-100500.000000000))*(x563)*(x566)))+(((IkReal(100500.000000000))*(sj3)*(x562)))+(((IkReal(100500.000000000))*(x563)*(x564)))+(((IkReal(-750.000000000000))*(x565)))+(((IkReal(-750.000000000000))*(x561)))))):(IkReal)1.0e30))*(((((IkReal(-250000.000000000))*(x559)*(x560)))+(((IkReal(-250000.000000000))*(x557)*(x558)))+(((IkReal(40401.0000000000))*((sj3)*(sj3))))+(((IkReal(-1.00000000000000))*(x561)*(x570)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x571=IKcos(j4);
IkReal x572=IKsin(j4);
IkReal x573=((IkReal(0.402000000000000))*(sj3));
IkReal x574=((cj6)*(npy));
IkReal x575=((npx)*(sj6));
IkReal x576=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x577=((cj5)*(cj6)*(npx));
IkReal x578=((IkReal(1.00000000000000))*(x572));
IkReal x579=((cj5)*(npy)*(sj6));
evalcond[0]=((((IkReal(-0.00300000000000000))*(x571)))+(x575)+(x574)+(((IkReal(-1.00000000000000))*(x572)*(x573))));
evalcond[1]=((((x571)*(x573)))+(((IkReal(-0.00300000000000000))*(x572)))+(((IkReal(-1.00000000000000))*(x579)))+(((IkReal(-1.00000000000000))*(x576)))+(x577));
evalcond[2]=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(x578)*(x579)))+(((x571)*(x575)))+(((x571)*(x574)))+(((x572)*(x577)))+(((IkReal(-1.00000000000000))*(x572)*(x576))));
evalcond[3]=((((x571)*(x577)))+(((IkReal(-1.00000000000000))*(x571)*(x579)))+(((IkReal(-1.00000000000000))*(x571)*(x576)))+(((IkReal(-1.00000000000000))*(x574)*(x578)))+(((IkReal(-1.00000000000000))*(x575)*(x578)))+(x573));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x580=(npy)*(npy);
IkReal x581=(sj6)*(sj6);
IkReal x582=(cj6)*(cj6);
IkReal x583=(npx)*(npx);
IkReal x584=((cj6)*(npy));
IkReal x585=((npz)*(sj5));
IkReal x586=((npx)*(sj6));
IkReal x587=((IkReal(1500.00000000000))*(cj5));
IkReal x588=((cj6)*(npx));
IkReal x589=((npy)*(sj6));
IkReal x590=((IkReal(500000.000000000))*(cj5));
IkReal x591=((cj6)*(sj6));
IkReal x592=((IkReal(3000.00000000000))*(cj5));
IkReal x593=((npx)*(npy));
IkReal x594=((sj3)*(x586));
if( IKabs(((((IKabs(((((IkReal(402000.000000000))*(sj3)*(x584)))+(((IkReal(-1.00000000000000))*(x588)*(x592)))+(((IkReal(3000.00000000000))*(x585)))+(((IkReal(402000.000000000))*(x594)))+(((x589)*(x592))))) != 0)?((IkReal)1/(((((IkReal(402000.000000000))*(sj3)*(x584)))+(((IkReal(-1.00000000000000))*(x588)*(x592)))+(((IkReal(3000.00000000000))*(x585)))+(((IkReal(402000.000000000))*(x594)))+(((x589)*(x592)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(2000000.00000000))*(x584)*(x586)))+(((IkReal(1000000.00000000))*(x580)*(x582)))+(((IkReal(1000000.00000000))*(x581)*(x583))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(201000.000000000))*(sj3)*(x584)))+(((x587)*(x589)))+(((IkReal(-1.00000000000000))*(x587)*(x588)))+(((IkReal(201000.000000000))*(x594)))+(((IkReal(1500.00000000000))*(x585))))) != 0)?((IkReal)1/(((((IkReal(201000.000000000))*(sj3)*(x584)))+(((x587)*(x589)))+(((IkReal(-1.00000000000000))*(x587)*(x588)))+(((IkReal(201000.000000000))*(x594)))+(((IkReal(1500.00000000000))*(x585)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x582)*(x590)*(x593)))+(((IkReal(500000.000000000))*(x584)*(x585)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(500000.000000000))*(x585)*(x586)))+(((x581)*(x590)*(x593)))+(((IkReal(-1.00000000000000))*(x583)*(x590)*(x591)))+(((x580)*(x590)*(x591))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(402000.000000000))*(sj3)*(x584)))+(((IkReal(-1.00000000000000))*(x588)*(x592)))+(((IkReal(3000.00000000000))*(x585)))+(((IkReal(402000.000000000))*(x594)))+(((x589)*(x592))))) != 0)?((IkReal)1/(((((IkReal(402000.000000000))*(sj3)*(x584)))+(((IkReal(-1.00000000000000))*(x588)*(x592)))+(((IkReal(3000.00000000000))*(x585)))+(((IkReal(402000.000000000))*(x594)))+(((x589)*(x592)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(2000000.00000000))*(x584)*(x586)))+(((IkReal(1000000.00000000))*(x580)*(x582)))+(((IkReal(1000000.00000000))*(x581)*(x583)))))))+IKsqr(((((IKabs(((((IkReal(201000.000000000))*(sj3)*(x584)))+(((x587)*(x589)))+(((IkReal(-1.00000000000000))*(x587)*(x588)))+(((IkReal(201000.000000000))*(x594)))+(((IkReal(1500.00000000000))*(x585))))) != 0)?((IkReal)1/(((((IkReal(201000.000000000))*(sj3)*(x584)))+(((x587)*(x589)))+(((IkReal(-1.00000000000000))*(x587)*(x588)))+(((IkReal(201000.000000000))*(x594)))+(((IkReal(1500.00000000000))*(x585)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x582)*(x590)*(x593)))+(((IkReal(500000.000000000))*(x584)*(x585)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(500000.000000000))*(x585)*(x586)))+(((x581)*(x590)*(x593)))+(((IkReal(-1.00000000000000))*(x583)*(x590)*(x591)))+(((x580)*(x590)*(x591)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((((IkReal(402000.000000000))*(sj3)*(x584)))+(((IkReal(-1.00000000000000))*(x588)*(x592)))+(((IkReal(3000.00000000000))*(x585)))+(((IkReal(402000.000000000))*(x594)))+(((x589)*(x592))))) != 0)?((IkReal)1/(((((IkReal(402000.000000000))*(sj3)*(x584)))+(((IkReal(-1.00000000000000))*(x588)*(x592)))+(((IkReal(3000.00000000000))*(x585)))+(((IkReal(402000.000000000))*(x594)))+(((x589)*(x592)))))):(IkReal)1.0e30))*(((IkReal(-9.00000000000000))+(((IkReal(2000000.00000000))*(x584)*(x586)))+(((IkReal(1000000.00000000))*(x580)*(x582)))+(((IkReal(1000000.00000000))*(x581)*(x583)))))), ((((IKabs(((((IkReal(201000.000000000))*(sj3)*(x584)))+(((x587)*(x589)))+(((IkReal(-1.00000000000000))*(x587)*(x588)))+(((IkReal(201000.000000000))*(x594)))+(((IkReal(1500.00000000000))*(x585))))) != 0)?((IkReal)1/(((((IkReal(201000.000000000))*(sj3)*(x584)))+(((x587)*(x589)))+(((IkReal(-1.00000000000000))*(x587)*(x588)))+(((IkReal(201000.000000000))*(x594)))+(((IkReal(1500.00000000000))*(x585)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x582)*(x590)*(x593)))+(((IkReal(500000.000000000))*(x584)*(x585)))+(((IkReal(603.000000000000))*(sj3)))+(((IkReal(500000.000000000))*(x585)*(x586)))+(((x581)*(x590)*(x593)))+(((IkReal(-1.00000000000000))*(x583)*(x590)*(x591)))+(((x580)*(x590)*(x591)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x595=IKcos(j4);
IkReal x596=IKsin(j4);
IkReal x597=((IkReal(0.402000000000000))*(sj3));
IkReal x598=((cj6)*(npy));
IkReal x599=((npx)*(sj6));
IkReal x600=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x601=((cj5)*(cj6)*(npx));
IkReal x602=((IkReal(1.00000000000000))*(x596));
IkReal x603=((cj5)*(npy)*(sj6));
evalcond[0]=((((IkReal(-0.00300000000000000))*(x595)))+(((IkReal(-1.00000000000000))*(x596)*(x597)))+(x599)+(x598));
evalcond[1]=((((x595)*(x597)))+(((IkReal(-0.00300000000000000))*(x596)))+(((IkReal(-1.00000000000000))*(x603)))+(x601)+(((IkReal(-1.00000000000000))*(x600))));
evalcond[2]=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(x602)*(x603)))+(((x595)*(x598)))+(((x595)*(x599)))+(((IkReal(-1.00000000000000))*(x596)*(x600)))+(((x596)*(x601))));
evalcond[3]=((((x595)*(x601)))+(((IkReal(-1.00000000000000))*(x595)*(x603)))+(((IkReal(-1.00000000000000))*(x599)*(x602)))+(((IkReal(-1.00000000000000))*(x598)*(x602)))+(x597)+(((IkReal(-1.00000000000000))*(x595)*(x600))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x604=((IkReal(134000.000000000))*(sj3));
IkReal x605=((npz)*(sj5));
IkReal x606=((npx)*(sj6));
IkReal x607=((cj6)*(npy));
IkReal x608=((cj5)*(cj6)*(npx));
IkReal x609=((cj5)*(npy)*(sj6));
if( IKabs(((gconst0)*(((((x604)*(x606)))+(((x604)*(x607)))+(((IkReal(-1000.00000000000))*(x605)))+(((IkReal(-1000.00000000000))*(x609)))+(((IkReal(1000.00000000000))*(x608))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((x604)*(x609)))+(((x604)*(x605)))+(((IkReal(-1.00000000000000))*(x604)*(x608)))+(((IkReal(1000.00000000000))*(x606)))+(((IkReal(1000.00000000000))*(x607))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst0)*(((((x604)*(x606)))+(((x604)*(x607)))+(((IkReal(-1000.00000000000))*(x605)))+(((IkReal(-1000.00000000000))*(x609)))+(((IkReal(1000.00000000000))*(x608)))))), ((gconst0)*(((((x604)*(x609)))+(((x604)*(x605)))+(((IkReal(-1.00000000000000))*(x604)*(x608)))+(((IkReal(1000.00000000000))*(x606)))+(((IkReal(1000.00000000000))*(x607)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x610=IKcos(j4);
IkReal x611=IKsin(j4);
IkReal x612=((IkReal(0.402000000000000))*(sj3));
IkReal x613=((cj6)*(npy));
IkReal x614=((npx)*(sj6));
IkReal x615=((IkReal(1.00000000000000))*(npz)*(sj5));
IkReal x616=((cj5)*(cj6)*(npx));
IkReal x617=((IkReal(1.00000000000000))*(x611));
IkReal x618=((cj5)*(npy)*(sj6));
evalcond[0]=((((IkReal(-0.00300000000000000))*(x610)))+(((IkReal(-1.00000000000000))*(x611)*(x612)))+(x614)+(x613));
evalcond[1]=((((IkReal(-0.00300000000000000))*(x611)))+(((IkReal(-1.00000000000000))*(x618)))+(((IkReal(-1.00000000000000))*(x615)))+(x616)+(((x610)*(x612))));
evalcond[2]=((IkReal(-0.00300000000000000))+(((IkReal(-1.00000000000000))*(x611)*(x615)))+(((x611)*(x616)))+(((IkReal(-1.00000000000000))*(x617)*(x618)))+(((x610)*(x613)))+(((x610)*(x614))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x614)*(x617)))+(((IkReal(-1.00000000000000))*(x610)*(x615)))+(((IkReal(-1.00000000000000))*(x610)*(x618)))+(x612)+(((IkReal(-1.00000000000000))*(x613)*(x617)))+(((x610)*(x616))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x131=((sj4)*(sj6));
IkReal x132=((IkReal(1.00000000000000))*(cj5));
IkReal x133=((cj3)*(cj5));
IkReal x134=((IkReal(1.00000000000000))*(sj5));
IkReal x135=((IkReal(1.00000000000000))*(sj6));
IkReal x136=((IkReal(1.00000000000000))*(cj3));
IkReal x137=((cj4)*(sj3));
IkReal x138=((cj6)*(sj4));
IkReal x139=((sj3)*(x138));
IkReal x140=((((sj3)*(sj5)))+(((cj4)*(x133))));
IkReal x141=((((cj5)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)*(x134))));
IkReal x142=((((cj4)*(cj6)))+(((IkReal(-1.00000000000000))*(x131)*(x132))));
IkReal x143=((((cj4)*(sj6)))+(((cj5)*(x138))));
IkReal x144=((((IkReal(-1.00000000000000))*(x132)*(x137)))+(((cj3)*(sj5))));
IkReal x145=((((sj5)*(x137)))+(x133));
IkReal x146=((sj6)*(x144));
IkReal x147=((((cj6)*(x140)))+(((IkReal(-1.00000000000000))*(x131)*(x136))));
IkReal x148=((((sj3)*(x131)))+(((cj6)*(x144))));
IkReal x149=((x139)+(((IkReal(-1.00000000000000))*(x146))));
IkReal x150=((((IkReal(-1.00000000000000))*(x136)*(x138)))+(((IkReal(-1.00000000000000))*(x135)*(x140))));
new_r00=((((r01)*(x150)))+(((r00)*(x147)))+(((r02)*(x141))));
new_r01=((((r11)*(x150)))+(((r10)*(x147)))+(((r12)*(x141))));
new_r02=((((r20)*(x147)))+(((r21)*(x150)))+(((r22)*(x141))));
new_r10=((((r01)*(x142)))+(((r00)*(x143)))+(((IkReal(-1.00000000000000))*(r02)*(sj4)*(x134))));
new_r11=((((r11)*(x142)))+(((r10)*(x143)))+(((IkReal(-1.00000000000000))*(r12)*(sj4)*(x134))));
new_r12=((((IkReal(-1.00000000000000))*(r22)*(sj4)*(x134)))+(((r20)*(x143)))+(((r21)*(x142))));
new_r20=((((r01)*(x149)))+(((r00)*(x148)))+(((r02)*(x145))));
new_r21=((((r10)*(x148)))+(((r11)*(((x139)+(((IkReal(-1.00000000000000))*(x135)*(x144)))))))+(((r12)*(x145))));
new_r22=((((r20)*(x148)))+(((r21)*(x149)))+(((r22)*(x145))));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=new_r22;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst103;
gconst103=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst104;
gconst104=IKsign(((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((new_r02)*(new_r02))))+(((IkReal(-1.00000000000000))*((new_r12)*(new_r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst105;
gconst105=IKsign(((((new_r10)*(new_r12)*(sj1)))+(((new_r00)*(new_r02)*(sj1)))));
dummyeval[0]=((((new_r10)*(new_r12)*(sj1)))+(((new_r00)*(new_r02)*(sj1))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x151=((IkReal(-1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x151;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x151;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x152=IKatan2(new_r12, new_r02);
j2array[0]=((IkReal(-1.00000000000000))*(x152));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x152))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j2))))+(((new_r02)*(IKcos(j2)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x153=IKsin(j0);
IkReal x154=((IkReal(1.00000000000000))*(sj2));
IkReal x155=((IkReal(1.00000000000000))*(IKcos(j0)));
evalcond[0]=((((new_r00)*(sj2)))+(x153)+(((cj2)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x155)))+(((new_r01)*(sj2)))+(((cj2)*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x155)))+(((IkReal(-1.00000000000000))*(new_r10)*(x154)))+(((cj2)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x154)))+(((IkReal(-1.00000000000000))*(x153)))+(((cj2)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x156=IKatan2(new_r12, new_r02);
j2array[0]=((IkReal(-1.00000000000000))*(x156));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x156))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(IKsin(j2))))+(((new_r02)*(IKcos(j2)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x157=IKcos(j0);
IkReal x158=IKsin(j0);
IkReal x159=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((new_r00)*(sj2)))+(x158)+(((cj2)*(new_r10))));
evalcond[1]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x157)))+(((cj2)*(new_r11))));
evalcond[2]=((x157)+(((IkReal(-1.00000000000000))*(new_r10)*(x159)))+(((cj2)*(new_r00))));
evalcond[3]=((x158)+(((IkReal(-1.00000000000000))*(new_r11)*(x159)))+(((cj2)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x160=((cj1)*(gconst105)*(new_r20));
if( IKabs(((new_r12)*(x160))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x160))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x160)), ((IkReal(-1.00000000000000))*(new_r02)*(x160)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x161=IKcos(j2);
IkReal x162=IKsin(j2);
IkReal x163=((IkReal(1.00000000000000))*(sj1));
IkReal x164=((sj1)*(x161));
IkReal x165=((IkReal(1.00000000000000))*(x162));
IkReal x166=((new_r02)*(x161));
evalcond[0]=((((new_r12)*(x161)))+(((new_r02)*(x162))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x163)))+(x166)+(((IkReal(-1.00000000000000))*(new_r12)*(x165))));
evalcond[2]=((((new_r00)*(x164)))+(((cj1)*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r10)*(x162)*(x163))));
evalcond[3]=((((new_r01)*(x164)))+(((cj1)*(new_r21)))+(((IkReal(-1.00000000000000))*(new_r11)*(x162)*(x163))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj1)*(new_r12)*(x165)))+(((IkReal(-1.00000000000000))*(new_r22)*(x163)))+(((cj1)*(x166))));
evalcond[5]=((IkReal(-1.00000000000000))+(((cj1)*(new_r22)))+(((IkReal(-1.00000000000000))*(new_r12)*(x162)*(x163)))+(((new_r02)*(x164))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst106;
gconst106=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x167=((IkReal(-1.00000000000000))+(new_r22));
IkReal x168=((IkReal(1.00000000000000))*(new_r12));
IkReal x169=((new_r02)*(sj2));
IkReal x170=((((cj2)*(new_r02)))+(((IkReal(-1.00000000000000))*(sj2)*(x168))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x167;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((x169)+(((cj2)*(new_r12))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x169)))+(((IkReal(-1.00000000000000))*(cj2)*(x168))));
evalcond[6]=x170;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x170;
evalcond[10]=x167;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x171=IKsin(j0);
IkReal x172=((IkReal(1.00000000000000))*(sj2));
IkReal x173=((IkReal(1.00000000000000))*(IKcos(j0)));
evalcond[0]=((((new_r00)*(sj2)))+(x171)+(((cj2)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x173)))+(((new_r01)*(sj2)))+(((cj2)*(new_r11))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x173)))+(((IkReal(-1.00000000000000))*(new_r10)*(x172)))+(((cj2)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(new_r11)*(x172)))+(((cj2)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x174=((new_r12)*(sj2));
IkReal x175=((new_r02)*(sj2));
IkReal x176=((cj2)*(new_r12));
IkReal x177=((cj2)*(new_r02));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((x175)+(x176));
evalcond[5]=((((IkReal(-1.00000000000000))*(x176)))+(((IkReal(-1.00000000000000))*(x175))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x174)))+(x177));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((((IkReal(-1.00000000000000))*(x177)))+(x174));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x178=IKcos(j0);
IkReal x179=IKsin(j0);
IkReal x180=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((new_r00)*(sj2)))+(x179)+(((cj2)*(new_r10))));
evalcond[1]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x178)))+(((cj2)*(new_r11))));
evalcond[2]=((x178)+(((IkReal(-1.00000000000000))*(new_r10)*(x180)))+(((cj2)*(new_r00))));
evalcond[3]=((x179)+(((IkReal(-1.00000000000000))*(new_r11)*(x180)))+(((cj2)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x181=IKsin(j0);
IkReal x182=IKcos(j0);
IkReal x183=((IkReal(1.00000000000000))*(cj1));
IkReal x184=((new_r10)*(sj2));
IkReal x185=((cj2)*(new_r01));
IkReal x186=((IkReal(1.00000000000000))*(sj1));
IkReal x187=((new_r11)*(sj2));
IkReal x188=((cj2)*(new_r00));
IkReal x189=((IkReal(1.00000000000000))*(x182));
evalcond[0]=((((sj1)*(x182)))+(new_r20));
evalcond[1]=((((sj1)*(x181)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(x181)+(((cj2)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x189)))+(((new_r01)*(sj2)))+(((cj2)*(new_r11))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x184)))+(x188)+(((IkReal(-1.00000000000000))*(x182)*(x183))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x187)))+(x185)+(((IkReal(-1.00000000000000))*(x181)*(x183))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x189)))+(((IkReal(-1.00000000000000))*(new_r20)*(x186)))+(((cj1)*(x188)))+(((IkReal(-1.00000000000000))*(x183)*(x184))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x186)))+(((IkReal(-1.00000000000000))*(x181)))+(((cj1)*(x185)))+(((IkReal(-1.00000000000000))*(x183)*(x187))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x190=IKsin(j0);
IkReal x191=IKcos(j0);
IkReal x192=((IkReal(1.00000000000000))*(cj1));
IkReal x193=((new_r10)*(sj2));
IkReal x194=((cj2)*(new_r01));
IkReal x195=((IkReal(1.00000000000000))*(sj1));
IkReal x196=((new_r11)*(sj2));
IkReal x197=((cj2)*(new_r00));
IkReal x198=((IkReal(1.00000000000000))*(x191));
evalcond[0]=((((sj1)*(x191)))+(new_r20));
evalcond[1]=((((sj1)*(x190)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(x190)+(((cj2)*(new_r10))));
evalcond[3]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x198)))+(((cj2)*(new_r11))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x191)*(x192)))+(((IkReal(-1.00000000000000))*(x193)))+(x197));
evalcond[5]=((((IkReal(-1.00000000000000))*(x190)*(x192)))+(((IkReal(-1.00000000000000))*(x196)))+(x194));
evalcond[6]=((((IkReal(-1.00000000000000))*(x192)*(x193)))+(((IkReal(-1.00000000000000))*(x198)))+(((IkReal(-1.00000000000000))*(new_r20)*(x195)))+(((cj1)*(x197))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x192)*(x196)))+(((IkReal(-1.00000000000000))*(x190)))+(((IkReal(-1.00000000000000))*(new_r21)*(x195)))+(((cj1)*(x194))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x199=((IkReal(-1.00000000000000))*(gconst106));
if( IKabs(((new_r21)*(x199))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(x199))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r21)*(x199)), ((new_r20)*(x199)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x200=IKsin(j0);
IkReal x201=IKcos(j0);
IkReal x202=((IkReal(1.00000000000000))*(cj1));
IkReal x203=((new_r10)*(sj2));
IkReal x204=((cj2)*(new_r01));
IkReal x205=((IkReal(1.00000000000000))*(sj1));
IkReal x206=((new_r11)*(sj2));
IkReal x207=((cj2)*(new_r00));
IkReal x208=((IkReal(1.00000000000000))*(x201));
evalcond[0]=((((sj1)*(x201)))+(new_r20));
evalcond[1]=((((sj1)*(x200)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(x200)+(((cj2)*(new_r10))));
evalcond[3]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x208)))+(((cj2)*(new_r11))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x201)*(x202)))+(x207)+(((IkReal(-1.00000000000000))*(x203))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x200)*(x202)))+(x204)+(((IkReal(-1.00000000000000))*(x206))));
evalcond[6]=((((cj1)*(x207)))+(((IkReal(-1.00000000000000))*(new_r20)*(x205)))+(((IkReal(-1.00000000000000))*(x202)*(x203)))+(((IkReal(-1.00000000000000))*(x208))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x205)))+(((cj1)*(x204)))+(((IkReal(-1.00000000000000))*(x202)*(x206)))+(((IkReal(-1.00000000000000))*(x200))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x209=((gconst104)*(sj1));
if( IKabs(((new_r12)*(x209))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x209))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x209)), ((IkReal(-1.00000000000000))*(new_r02)*(x209)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x210=IKcos(j2);
IkReal x211=IKsin(j2);
IkReal x212=((IkReal(1.00000000000000))*(sj1));
IkReal x213=((sj1)*(x210));
IkReal x214=((IkReal(1.00000000000000))*(x211));
IkReal x215=((new_r02)*(x210));
evalcond[0]=((((new_r02)*(x211)))+(((new_r12)*(x210))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r12)*(x214)))+(x215)+(((IkReal(-1.00000000000000))*(x212))));
evalcond[2]=((((cj1)*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r10)*(x211)*(x212)))+(((new_r00)*(x213))));
evalcond[3]=((((cj1)*(new_r21)))+(((new_r01)*(x213)))+(((IkReal(-1.00000000000000))*(new_r11)*(x211)*(x212))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r22)*(x212)))+(((IkReal(-1.00000000000000))*(cj1)*(new_r12)*(x214)))+(((cj1)*(x215))));
evalcond[5]=((IkReal(-1.00000000000000))+(((cj1)*(new_r22)))+(((IkReal(-1.00000000000000))*(new_r12)*(x211)*(x212)))+(((new_r02)*(x213))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst106;
gconst106=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x216=((IkReal(-1.00000000000000))+(new_r22));
IkReal x217=((IkReal(1.00000000000000))*(new_r12));
IkReal x218=((new_r02)*(sj2));
IkReal x219=((((IkReal(-1.00000000000000))*(sj2)*(x217)))+(((cj2)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x216;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((x218)+(((cj2)*(new_r12))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj2)*(x217)))+(((IkReal(-1.00000000000000))*(x218))));
evalcond[6]=x219;
evalcond[7]=new_r20;
evalcond[8]=new_r21;
evalcond[9]=x219;
evalcond[10]=x216;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x220=IKsin(j0);
IkReal x221=((IkReal(1.00000000000000))*(sj2));
IkReal x222=((IkReal(1.00000000000000))*(IKcos(j0)));
evalcond[0]=((((new_r00)*(sj2)))+(x220)+(((cj2)*(new_r10))));
evalcond[1]=((((new_r01)*(sj2)))+(((cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(x222))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x221)))+(((cj2)*(new_r00)))+(((IkReal(-1.00000000000000))*(x222))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x221)))+(((cj2)*(new_r01)))+(((IkReal(-1.00000000000000))*(x220))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x223=((new_r12)*(sj2));
IkReal x224=((new_r02)*(sj2));
IkReal x225=((cj2)*(new_r12));
IkReal x226=((cj2)*(new_r02));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((x225)+(x224));
evalcond[5]=((((IkReal(-1.00000000000000))*(x225)))+(((IkReal(-1.00000000000000))*(x224))));
evalcond[6]=((x226)+(((IkReal(-1.00000000000000))*(x223))));
evalcond[7]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[8]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[9]=((x223)+(((IkReal(-1.00000000000000))*(x226))));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x227=IKcos(j0);
IkReal x228=IKsin(j0);
IkReal x229=((IkReal(1.00000000000000))*(sj2));
evalcond[0]=((((new_r00)*(sj2)))+(x228)+(((cj2)*(new_r10))));
evalcond[1]=((((new_r01)*(sj2)))+(((cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(x227))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x229)))+(x227)+(((cj2)*(new_r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x229)))+(x228)+(((cj2)*(new_r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))))+IKsqr(((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(sj2)))), ((IkReal(-1.00000000000000))*(new_r20)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x230=IKsin(j0);
IkReal x231=IKcos(j0);
IkReal x232=((IkReal(1.00000000000000))*(cj1));
IkReal x233=((new_r10)*(sj2));
IkReal x234=((cj2)*(new_r01));
IkReal x235=((IkReal(1.00000000000000))*(sj1));
IkReal x236=((new_r11)*(sj2));
IkReal x237=((cj2)*(new_r00));
IkReal x238=((IkReal(1.00000000000000))*(x231));
evalcond[0]=((((sj1)*(x231)))+(new_r20));
evalcond[1]=((((sj1)*(x230)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(x230)+(((cj2)*(new_r10))));
evalcond[3]=((((new_r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x238)))+(((cj2)*(new_r11))));
evalcond[4]=((x237)+(((IkReal(-1.00000000000000))*(x231)*(x232)))+(((IkReal(-1.00000000000000))*(x233))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x230)*(x232)))+(x234)+(((IkReal(-1.00000000000000))*(x236))));
evalcond[6]=((((cj1)*(x237)))+(((IkReal(-1.00000000000000))*(new_r20)*(x235)))+(((IkReal(-1.00000000000000))*(x238)))+(((IkReal(-1.00000000000000))*(x232)*(x233))));
evalcond[7]=((((cj1)*(x234)))+(((IkReal(-1.00000000000000))*(new_r21)*(x235)))+(((IkReal(-1.00000000000000))*(x230)))+(((IkReal(-1.00000000000000))*(x232)*(x236))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r01)*(sj2)))+(((cj2)*(new_r11))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))))+IKsqr(((((new_r01)*(sj2)))+(((cj2)*(new_r11)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((IkReal(-1.00000000000000))*(new_r21)*(((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30))), ((((new_r01)*(sj2)))+(((cj2)*(new_r11)))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x239=IKsin(j0);
IkReal x240=IKcos(j0);
IkReal x241=((IkReal(1.00000000000000))*(cj1));
IkReal x242=((new_r10)*(sj2));
IkReal x243=((cj2)*(new_r01));
IkReal x244=((IkReal(1.00000000000000))*(sj1));
IkReal x245=((new_r11)*(sj2));
IkReal x246=((cj2)*(new_r00));
IkReal x247=((IkReal(1.00000000000000))*(x240));
evalcond[0]=((new_r20)+(((sj1)*(x240))));
evalcond[1]=((((sj1)*(x239)))+(new_r21));
evalcond[2]=((((new_r00)*(sj2)))+(x239)+(((cj2)*(new_r10))));
evalcond[3]=((((new_r01)*(sj2)))+(((cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(x247))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x242)))+(x246)+(((IkReal(-1.00000000000000))*(x240)*(x241))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x245)))+(x243)+(((IkReal(-1.00000000000000))*(x239)*(x241))));
evalcond[6]=((((cj1)*(x246)))+(((IkReal(-1.00000000000000))*(x241)*(x242)))+(((IkReal(-1.00000000000000))*(new_r20)*(x244)))+(((IkReal(-1.00000000000000))*(x247))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x244)))+(((cj1)*(x243)))+(((IkReal(-1.00000000000000))*(x241)*(x245)))+(((IkReal(-1.00000000000000))*(x239))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x248=((IkReal(-1.00000000000000))*(gconst106));
if( IKabs(((new_r21)*(x248))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(x248))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r21)*(x248)), ((new_r20)*(x248)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x249=IKsin(j0);
IkReal x250=IKcos(j0);
IkReal x251=((IkReal(1.00000000000000))*(cj1));
IkReal x252=((new_r10)*(sj2));
IkReal x253=((cj2)*(new_r01));
IkReal x254=((IkReal(1.00000000000000))*(sj1));
IkReal x255=((new_r11)*(sj2));
IkReal x256=((cj2)*(new_r00));
IkReal x257=((IkReal(1.00000000000000))*(x250));
evalcond[0]=((((sj1)*(x250)))+(new_r20));
evalcond[1]=((new_r21)+(((sj1)*(x249))));
evalcond[2]=((((new_r00)*(sj2)))+(x249)+(((cj2)*(new_r10))));
evalcond[3]=((((new_r01)*(sj2)))+(((cj2)*(new_r11)))+(((IkReal(-1.00000000000000))*(x257))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x250)*(x251)))+(x256)+(((IkReal(-1.00000000000000))*(x252))));
evalcond[5]=((x253)+(((IkReal(-1.00000000000000))*(x249)*(x251)))+(((IkReal(-1.00000000000000))*(x255))));
evalcond[6]=((((cj1)*(x256)))+(((IkReal(-1.00000000000000))*(x251)*(x252)))+(((IkReal(-1.00000000000000))*(new_r20)*(x254)))+(((IkReal(-1.00000000000000))*(x257))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r21)*(x254)))+(((cj1)*(x253)))+(((IkReal(-1.00000000000000))*(x249)))+(((IkReal(-1.00000000000000))*(x251)*(x255))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x258=((IkReal(-1.00000000000000))*(gconst103));
if( IKabs(((new_r21)*(x258))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r20)*(x258))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r21)*(x258)), ((new_r20)*(x258)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((sj1)*(IKcos(j0))))+(new_r20));
evalcond[1]=((((sj1)*(IKsin(j0))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst107;
gconst107=IKsign(((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst108;
gconst108=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x259=((cj0)*(gconst108));
if( IKabs(((new_r12)*(x259))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x259))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x259)), ((IkReal(-1.00000000000000))*(new_r02)*(x259)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x260=IKsin(j2);
IkReal x261=IKcos(j2);
IkReal x262=((IkReal(1.00000000000000))*(cj0));
IkReal x263=((IkReal(1.00000000000000))*(sj1));
IkReal x264=((IkReal(1.00000000000000))*(cj1));
IkReal x265=((new_r10)*(x260));
IkReal x266=((new_r12)*(x260));
IkReal x267=((new_r01)*(x261));
IkReal x268=((new_r00)*(x261));
IkReal x269=((new_r02)*(x261));
IkReal x270=((IkReal(1.00000000000000))*(new_r11)*(x260));
evalcond[0]=((((new_r12)*(x261)))+(((new_r02)*(x260))));
evalcond[1]=((sj0)+(((new_r00)*(x260)))+(((new_r10)*(x261))));
evalcond[2]=((((new_r01)*(x260)))+(((IkReal(-1.00000000000000))*(x262)))+(((new_r11)*(x261))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x266)))+(x269)+(((IkReal(-1.00000000000000))*(x263))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x265)))+(((IkReal(-1.00000000000000))*(cj1)*(x262)))+(x268));
evalcond[5]=((x267)+(((IkReal(-1.00000000000000))*(sj0)*(x264)))+(((IkReal(-1.00000000000000))*(x270))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x263)*(x265)))+(((cj1)*(new_r20)))+(((sj1)*(x268))));
evalcond[7]=((((cj1)*(new_r21)))+(((IkReal(-1.00000000000000))*(new_r11)*(x260)*(x263)))+(((sj1)*(x267))));
evalcond[8]=((((cj1)*(x269)))+(((IkReal(-1.00000000000000))*(new_r22)*(x263)))+(((IkReal(-1.00000000000000))*(x264)*(x266))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x263)*(x266)))+(((cj1)*(new_r22)))+(((sj1)*(x269))));
evalcond[10]=((((cj1)*(x268)))+(((IkReal(-1.00000000000000))*(new_r20)*(x263)))+(((IkReal(-1.00000000000000))*(x262)))+(((IkReal(-1.00000000000000))*(x264)*(x265))));
evalcond[11]=((((IkReal(-1.00000000000000))*(sj0)))+(((cj1)*(x267)))+(((IkReal(-1.00000000000000))*(new_r11)*(x260)*(x264)))+(((IkReal(-1.00000000000000))*(new_r21)*(x263))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x271=((gconst107)*(sj0));
if( IKabs(((new_r12)*(x271))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(new_r02)*(x271))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((new_r12)*(x271)), ((IkReal(-1.00000000000000))*(new_r02)*(x271)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x272=IKsin(j2);
IkReal x273=IKcos(j2);
IkReal x274=((IkReal(1.00000000000000))*(cj0));
IkReal x275=((IkReal(1.00000000000000))*(sj1));
IkReal x276=((IkReal(1.00000000000000))*(cj1));
IkReal x277=((new_r10)*(x272));
IkReal x278=((new_r12)*(x272));
IkReal x279=((new_r01)*(x273));
IkReal x280=((new_r00)*(x273));
IkReal x281=((new_r02)*(x273));
IkReal x282=((IkReal(1.00000000000000))*(new_r11)*(x272));
evalcond[0]=((((new_r02)*(x272)))+(((new_r12)*(x273))));
evalcond[1]=((sj0)+(((new_r00)*(x272)))+(((new_r10)*(x273))));
evalcond[2]=((((new_r01)*(x272)))+(((IkReal(-1.00000000000000))*(x274)))+(((new_r11)*(x273))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x278)))+(x281)+(((IkReal(-1.00000000000000))*(x275))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x277)))+(((IkReal(-1.00000000000000))*(cj1)*(x274)))+(x280));
evalcond[5]=((x279)+(((IkReal(-1.00000000000000))*(sj0)*(x276)))+(((IkReal(-1.00000000000000))*(x282))));
evalcond[6]=((((cj1)*(new_r20)))+(((IkReal(-1.00000000000000))*(x275)*(x277)))+(((sj1)*(x280))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r11)*(x272)*(x275)))+(((cj1)*(new_r21)))+(((sj1)*(x279))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r22)*(x275)))+(((cj1)*(x281)))+(((IkReal(-1.00000000000000))*(x276)*(x278))));
evalcond[9]=((IkReal(-1.00000000000000))+(((cj1)*(new_r22)))+(((IkReal(-1.00000000000000))*(x275)*(x278)))+(((sj1)*(x281))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r20)*(x275)))+(((IkReal(-1.00000000000000))*(x274)))+(((cj1)*(x280)))+(((IkReal(-1.00000000000000))*(x276)*(x277))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r11)*(x272)*(x276)))+(((IkReal(-1.00000000000000))*(sj0)))+(((cj1)*(x279)))+(((IkReal(-1.00000000000000))*(new_r21)*(x275))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - lwr (aa86e31409775049e47a06d04c55ddd2)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
